(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TdepthB" defined at submarine.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TdepthB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tdepthB =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tdepthB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tdepthB__ref =
  { mutable tdepthB__content "model_trace:" "name:" : tdepthB }
 
 function tdepthB__ref___projection 
   (a : tdepthB__ref) : tdepthB =
  a.tdepthB__content
 
 meta "model_projection" function tdepthB__ref___projection
 
 meta "inline : no" function tdepthB__ref___projection
 
 val tdepthB__havoc 
   (x : tdepthB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TdepthB" defined at submarine.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TdepthB__rep
 use        Submarine__TdepthB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__TdepthB.tdepthB) : int =
  (Submarine__TdepthB.tdepthB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__TdepthB.tdepthB, 
 predicate in_range = Submarine__TdepthB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "depth" defined at submarine.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Submarine__depth
 use import "_gnatprove_standard".Main
 use import "int".Int

 type depth =
  < range 0 1000 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1000
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = depth, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type depth__ref =
  { mutable depth__content "model_trace:" "name:" : depth }
 
 function depth__ref___projection 
   (a : depth__ref) : depth =
  a.depth__content
 
 meta "model_projection" function depth__ref___projection
 
 meta "inline : no" function depth__ref___projection
 
 val depth__havoc 
   (x : depth__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "depth" defined at submarine.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Submarine__depth__rep
 use        Submarine__depth
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__depth.depth) : int =
  (Submarine__depth.depth'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__depth.depth, 
 predicate in_range = Submarine__depth.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ToxygenB" defined at submarine.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Submarine__ToxygenB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type toxygenB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = toxygenB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type toxygenB__ref =
  { mutable toxygenB__content "model_trace:" "name:" : toxygenB }
 
 function toxygenB__ref___projection 
   (a : toxygenB__ref) : toxygenB =
  a.toxygenB__content
 
 meta "model_projection" function toxygenB__ref___projection
 
 meta "inline : no" function toxygenB__ref___projection
 
 val toxygenB__havoc 
   (x : toxygenB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ToxygenB" defined at submarine.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Submarine__ToxygenB__rep
 use        Submarine__ToxygenB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__ToxygenB.toxygenB) : int =
  (Submarine__ToxygenB.toxygenB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__ToxygenB.toxygenB, 
 predicate in_range = Submarine__ToxygenB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "oxygen" defined at submarine.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Submarine__oxygen
 use import "_gnatprove_standard".Main
 use import "int".Int

 type oxygen =
  < range 0 100 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  100
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = oxygen, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type oxygen__ref =
  { mutable oxygen__content "model_trace:" "name:" : oxygen }
 
 function oxygen__ref___projection 
   (a : oxygen__ref) : oxygen =
  a.oxygen__content
 
 meta "model_projection" function oxygen__ref___projection
 
 meta "inline : no" function oxygen__ref___projection
 
 val oxygen__havoc 
   (x : oxygen__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "oxygen" defined at submarine.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Submarine__oxygen__rep
 use        Submarine__oxygen
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__oxygen.oxygen) : int =
  (Submarine__oxygen.oxygen'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__oxygen.oxygen, 
 predicate in_range = Submarine__oxygen.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TtemperatureB" defined at submarine.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TtemperatureB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ttemperatureB =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ttemperatureB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ttemperatureB__ref =
  { mutable ttemperatureB__content "model_trace:" "name:" : ttemperatureB }
 
 function ttemperatureB__ref___projection 
   (a : ttemperatureB__ref) : ttemperatureB =
  a.ttemperatureB__content
 
 meta "model_projection" function ttemperatureB__ref___projection
 
 meta "inline : no" function ttemperatureB__ref___projection
 
 val ttemperatureB__havoc 
   (x : ttemperatureB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TtemperatureB" defined at submarine.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TtemperatureB__rep
 use        Submarine__TtemperatureB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__TtemperatureB.ttemperatureB) : int =
  (Submarine__TtemperatureB.ttemperatureB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__TtemperatureB.ttemperatureB, 
 predicate in_range = Submarine__TtemperatureB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "temperature" defined at submarine.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Submarine__temperature
 use import "_gnatprove_standard".Main
 use import "int".Int

 type temperature =
  < range 0 2000 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2000
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = temperature, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type temperature__ref =
  { mutable temperature__content "model_trace:" "name:" : temperature }
 
 function temperature__ref___projection 
   (a : temperature__ref) : temperature =
  a.temperature__content
 
 meta "model_projection" function temperature__ref___projection
 
 meta "inline : no" function temperature__ref___projection
 
 val temperature__havoc 
   (x : temperature__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "temperature" defined at submarine.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Submarine__temperature__rep
 use        Submarine__temperature
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__temperature.temperature) : int =
  (Submarine__temperature.temperature'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__temperature.temperature, 
 predicate in_range = Submarine__temperature.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "torpeadobay" defined at submarine.ads:25, created in Gnat2Why.Types.Translate_Type *)
module Submarine__torpeadobay
 use import "_gnatprove_standard".Main
 use import "int".Int

 type torpeadobay 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = torpeadobay, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type torpeadobay__ref =
  { mutable torpeadobay__content "model_trace:" "name:" : torpeadobay }
 
 function torpeadobay__ref___projection 
   (a : torpeadobay__ref) : torpeadobay =
  a.torpeadobay__content
 
 meta "model_projection" function torpeadobay__ref___projection
 
 meta "inline : no" function torpeadobay__ref___projection
 
 val torpeadobay__havoc 
   (x : torpeadobay__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "torpeadobay" defined at submarine.ads:25, created in Gnat2Why.Types.Translate_Type *)
module Submarine__torpeadobay__rep
 use        Submarine__torpeadobay
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__torpeadobay.torpeadobay, 
 predicate in_range = Submarine__torpeadobay.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tas_indexB" defined at submarine.ads:29, created in Gnat2Why.Types.Translate_Type *)
module Submarine__Tas_indexB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tas_indexB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tas_indexB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tas_indexB__ref =
  { mutable tas_indexB__content "model_trace:" "name:" : tas_indexB }
 
 function tas_indexB__ref___projection 
   (a : tas_indexB__ref) : tas_indexB =
  a.tas_indexB__content
 
 meta "model_projection" function tas_indexB__ref___projection
 
 meta "inline : no" function tas_indexB__ref___projection
 
 val tas_indexB__havoc 
   (x : tas_indexB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tas_indexB" defined at submarine.ads:29, created in Gnat2Why.Types.Translate_Type *)
module Submarine__Tas_indexB__rep
 use        Submarine__Tas_indexB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__Tas_indexB.tas_indexB) : int =
  (Submarine__Tas_indexB.tas_indexB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__Tas_indexB.tas_indexB, 
 predicate in_range = Submarine__Tas_indexB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "as_index" defined at submarine.ads:29, created in Gnat2Why.Types.Translate_Type *)
module Submarine__as_index
 use import "_gnatprove_standard".Main
 use import "int".Int

 type as_index =
  < range 0 25 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  25
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = as_index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type as_index__ref =
  { mutable as_index__content "model_trace:" "name:" : as_index }
 
 function as_index__ref___projection 
   (a : as_index__ref) : as_index =
  a.as_index__content
 
 meta "model_projection" function as_index__ref___projection
 
 meta "inline : no" function as_index__ref___projection
 
 val as_index__havoc 
   (x : as_index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "as_index" defined at submarine.ads:29, created in Gnat2Why.Types.Translate_Type *)
module Submarine__as_index__rep
 use        Submarine__as_index
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__as_index.as_index) : int =
  (Submarine__as_index.as_index'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__as_index.as_index, 
 predicate in_range = Submarine__as_index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TammostoreB" defined at submarine.ads:30, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Submarine__torpeadobay
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay
 use        Submarine__torpeadobay__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Submarine__torpeadobay.torpeadobay
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Submarine__torpeadobay__rep.to_rep (get a temp___idx_154)) = (Submarine__torpeadobay__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Submarine__torpeadobay__rep.to_rep (get a temp___idx_154)) = (Submarine__torpeadobay__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TammostoreB" defined at submarine.ads:30, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Submarine__torpeadobay__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Submarine__torpeadobay

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Submarine__torpeadobay.component_type, 
 type map = Array__Int__Submarine__torpeadobay.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Submarine__torpeadobay.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TammostoreB" defined at submarine.ads:30, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Submarine__torpeadobay_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay__rep
 use        Array__Int__Submarine__torpeadobay

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Submarine__torpeadobay.component_type, 
 function to_rep = Submarine__torpeadobay__rep.to_rep, 
 type map = Array__Int__Submarine__torpeadobay.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Submarine__torpeadobay.get, 
 function bool_eq = Array__Int__Submarine__torpeadobay.bool_eq

end

(* Module for axiomatizing type "TammostoreB" defined at submarine.ads:30, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TammostoreB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay
 use        Submarine__Tas_indexB
 use        Submarine__Tas_indexB__rep
 use        Submarine__as_index
 use        Array__Int__Submarine__torpeadobay

 type component_type =
  Submarine__torpeadobay.torpeadobay
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Submarine__torpeadobay.map, 
 function array_bool_eq = Array__Int__Submarine__torpeadobay.bool_eq, 
 type index_base_type = Submarine__Tas_indexB.tas_indexB, 
 type index_rep_type = int, 
 function to_rep = Submarine__Tas_indexB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Submarine__Tas_indexB.in_range, 
 predicate index_dynamic_property = Submarine__as_index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tammostoreB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tammostoreB__ref =
  { mutable tammostoreB__content "model_trace:" "name:" : tammostoreB }
 
 function tammostoreB__ref___projection 
   (a : tammostoreB__ref) : tammostoreB =
  a.tammostoreB__content
 
 meta "model_projection" function tammostoreB__ref___projection
 
 meta "inline : no" function tammostoreB__ref___projection
 
 val tammostoreB__havoc 
   (x : tammostoreB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "ammostore" defined at submarine.ads:30, created in Gnat2Why.Types.Translate_Type *)
module Submarine__ammostore
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay
 use        Array__Int__Submarine__torpeadobay

 type component_type =
  Submarine__torpeadobay.torpeadobay
 
 function first 
   : int =
  0
 
 function last 
   : int =
  25
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Submarine__torpeadobay.map, 
 function array_bool_eq = Array__Int__Submarine__torpeadobay.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "Tchambered_indexB" defined at submarine.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Submarine__Tchambered_indexB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tchambered_indexB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tchambered_indexB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tchambered_indexB__ref =
  { mutable tchambered_indexB__content "model_trace:" "name:" : tchambered_indexB }
 
 function tchambered_indexB__ref___projection 
   (a : tchambered_indexB__ref) : tchambered_indexB =
  a.tchambered_indexB__content
 
 meta "model_projection" function tchambered_indexB__ref___projection
 
 meta "inline : no" function tchambered_indexB__ref___projection
 
 val tchambered_indexB__havoc 
   (x : tchambered_indexB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tchambered_indexB" defined at submarine.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Submarine__Tchambered_indexB__rep
 use        Submarine__Tchambered_indexB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__Tchambered_indexB.tchambered_indexB) : int =
  (Submarine__Tchambered_indexB.tchambered_indexB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__Tchambered_indexB.tchambered_indexB, 
 predicate in_range = Submarine__Tchambered_indexB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "chambered_index" defined at submarine.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Submarine__chambered_index
 use import "_gnatprove_standard".Main
 use import "int".Int

 type chambered_index =
  < range 0 4 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = chambered_index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type chambered_index__ref =
  { mutable chambered_index__content "model_trace:" "name:" : chambered_index }
 
 function chambered_index__ref___projection 
   (a : chambered_index__ref) : chambered_index =
  a.chambered_index__content
 
 meta "model_projection" function chambered_index__ref___projection
 
 meta "inline : no" function chambered_index__ref___projection
 
 val chambered_index__havoc 
   (x : chambered_index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "chambered_index" defined at submarine.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Submarine__chambered_index__rep
 use        Submarine__chambered_index
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__chambered_index.chambered_index) : int =
  (Submarine__chambered_index.chambered_index'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__chambered_index.chambered_index, 
 predicate in_range = Submarine__chambered_index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TchambersB" defined at submarine.ads:34, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TchambersB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__Tchambered_indexB
 use        Submarine__Tchambered_indexB__rep
 use        Submarine__chambered_index

 type component_type =
  Submarine__torpeadobay.torpeadobay
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Submarine__torpeadobay.map, 
 function array_bool_eq = Array__Int__Submarine__torpeadobay.bool_eq, 
 type index_base_type = Submarine__Tchambered_indexB.tchambered_indexB, 
 type index_rep_type = int, 
 function to_rep = Submarine__Tchambered_indexB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Submarine__Tchambered_indexB.in_range, 
 predicate index_dynamic_property = Submarine__chambered_index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tchambersB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tchambersB__ref =
  { mutable tchambersB__content "model_trace:" "name:" : tchambersB }
 
 function tchambersB__ref___projection 
   (a : tchambersB__ref) : tchambersB =
  a.tchambersB__content
 
 meta "model_projection" function tchambersB__ref___projection
 
 meta "inline : no" function tchambersB__ref___projection
 
 val tchambersB__havoc 
   (x : tchambersB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "chambers" defined at submarine.ads:34, created in Gnat2Why.Types.Translate_Type *)
module Submarine__chambers
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay
 use        Array__Int__Submarine__torpeadobay

 type component_type =
  Submarine__torpeadobay.torpeadobay
 
 function first 
   : int =
  0
 
 function last 
   : int =
  4
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Submarine__torpeadobay.map, 
 function array_bool_eq = Array__Int__Submarine__torpeadobay.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "openclose" defined at submarine.ads:37, created in Gnat2Why.Types.Translate_Type *)
module Submarine__openclose
 use import "_gnatprove_standard".Main
 use import "int".Int

 type openclose 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = openclose, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type openclose__ref =
  { mutable openclose__content "model_trace:" "name:" : openclose }
 
 function openclose__ref___projection 
   (a : openclose__ref) : openclose =
  a.openclose__content
 
 meta "model_projection" function openclose__ref___projection
 
 meta "inline : no" function openclose__ref___projection
 
 val openclose__havoc 
   (x : openclose__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "openclose" defined at submarine.ads:37, created in Gnat2Why.Types.Translate_Type *)
module Submarine__openclose__rep
 use        Submarine__openclose
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__openclose.openclose, 
 predicate in_range = Submarine__openclose.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "lock" defined at submarine.ads:38, created in Gnat2Why.Types.Translate_Type *)
module Submarine__lock
 use import "_gnatprove_standard".Main
 use import "int".Int

 type lock 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = lock, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type lock__ref =
  { mutable lock__content "model_trace:" "name:" : lock }
 
 function lock__ref___projection 
   (a : lock__ref) : lock =
  a.lock__content
 
 meta "model_projection" function lock__ref___projection
 
 meta "inline : no" function lock__ref___projection
 
 val lock__havoc 
   (x : lock__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "lock" defined at submarine.ads:38, created in Gnat2Why.Types.Translate_Type *)
module Submarine__lock__rep
 use        Submarine__lock
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__lock.lock, 
 predicate in_range = Submarine__lock.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "onoff" defined at submarine.ads:39, created in Gnat2Why.Types.Translate_Type *)
module Submarine__onoff
 use import "_gnatprove_standard".Main
 use import "int".Int

 type onoff 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = onoff, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type onoff__ref =
  { mutable onoff__content "model_trace:" "name:" : onoff }
 
 function onoff__ref___projection 
   (a : onoff__ref) : onoff =
  a.onoff__content
 
 meta "model_projection" function onoff__ref___projection
 
 meta "inline : no" function onoff__ref___projection
 
 val onoff__havoc 
   (x : onoff__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "onoff" defined at submarine.ads:39, created in Gnat2Why.Types.Translate_Type *)
module Submarine__onoff__rep
 use        Submarine__onoff
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__onoff.onoff, 
 predicate in_range = Submarine__onoff.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "door" defined at submarine.ads:43, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Submarine__door__rep
 use import "_gnatprove_standard".Main
 use        Submarine__openclose
 use        Submarine__openclose__rep
 use        Submarine__lock
 use        Submarine__lock__rep

 type __split_fields =
  { rec__submarine__door__open_close "model_trace:.3182" "name:open_close" : Submarine__openclose.openclose; rec__submarine__door__locked_unlocked "model_trace:.3192" "name:locked_unlocked" : Submarine__lock.lock }
 
 function __split_fields_open_close__projection "model_trace:.3182" "name:open_close" 
   (a : __split_fields) : Submarine__openclose.openclose =
  a.rec__submarine__door__open_close
 
 meta "model_projection" function __split_fields_open_close__projection
 
 meta "inline : no" function __split_fields_open_close__projection
 
 function __split_fields_locked_unlocked__projection "model_trace:.3192" "name:locked_unlocked" 
   (a : __split_fields) : Submarine__lock.lock =
  a.rec__submarine__door__locked_unlocked
 
 meta "model_projection" function __split_fields_locked_unlocked__projection
 
 meta "inline : no" function __split_fields_locked_unlocked__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate submarine__door__open_close__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__door__open_close_ 
   (a : __rep) : Submarine__openclose.openclose
  requires {  (submarine__door__open_close__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__door__open_close) }
 
 predicate submarine__door__locked_unlocked__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__door__locked_unlocked_ 
   (a : __rep) : Submarine__lock.lock
  requires {  (submarine__door__locked_unlocked__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__door__locked_unlocked) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Submarine__openclose__rep.to_rep a.__split_fields.rec__submarine__door__open_close) = (Submarine__openclose__rep.to_rep b.__split_fields.rec__submarine__door__open_close)) /\ ((Submarine__lock__rep.to_rep a.__split_fields.rec__submarine__door__locked_unlocked) = (Submarine__lock__rep.to_rep b.__split_fields.rec__submarine__door__locked_unlocked)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "door" defined at submarine.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Submarine__door
 use export Submarine__door__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type door =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : door) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : door) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : door.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : door.
   ((object__alignment a) >= 0))
 
 function submarine__door__open_close__first__bit 
   : int
 
 function submarine__door__open_close__last__bit 
   : int
 
 function submarine__door__open_close__position 
   : int
 
 axiom submarine__door__open_close__first__bit_axiom :
  ((submarine__door__open_close__first__bit ) >= 0)
 
 axiom submarine__door__open_close__last__bit_axiom :
  ((submarine__door__open_close__last__bit ) > (submarine__door__open_close__first__bit ))
 
 axiom submarine__door__open_close__position_axiom :
  ((submarine__door__open_close__position ) >= 0)
 
 function submarine__door__locked_unlocked__first__bit 
   : int
 
 function submarine__door__locked_unlocked__last__bit 
   : int
 
 function submarine__door__locked_unlocked__position 
   : int
 
 axiom submarine__door__locked_unlocked__first__bit_axiom :
  ((submarine__door__locked_unlocked__first__bit ) >= 0)
 
 axiom submarine__door__locked_unlocked__last__bit_axiom :
  ((submarine__door__locked_unlocked__last__bit ) > (submarine__door__locked_unlocked__first__bit ))
 
 axiom submarine__door__locked_unlocked__position_axiom :
  ((submarine__door__locked_unlocked__position ) >= 0)
 
 function user_eq 
   (a : door) (b : door) : bool
 
 function dummy 
   : door
 
 type door__ref =
  { mutable door__content "model_trace:" "name:" : door }
 
 function door__ref___projection 
   (a : door__ref) : door =
  a.door__content
 
 meta "model_projection" function door__ref___projection
 
 meta "inline : no" function door__ref___projection
 
 val door__havoc 
   (x : door__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "warning" defined at submarine.ads:53, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Submarine__warning__rep
 use import "_gnatprove_standard".Main
 use        Submarine__onoff
 use        Submarine__onoff__rep

 type __split_fields =
  { rec__submarine__warning__on_off "model_trace:.3246" "name:on_Off" : Submarine__onoff.onoff }
 
 function __split_fields_on_Off__projection "model_trace:.3246" "name:on_Off" 
   (a : __split_fields) : Submarine__onoff.onoff =
  a.rec__submarine__warning__on_off
 
 meta "model_projection" function __split_fields_on_Off__projection
 
 meta "inline : no" function __split_fields_on_Off__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___2__projection
 
 meta "inline : no" function __split_fields__ref___2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___2__projection
 
 meta "inline : no" function __rep___2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate submarine__warning__on_off__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__warning__on_off_ 
   (a : __rep) : Submarine__onoff.onoff
  requires {  (submarine__warning__on_off__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__warning__on_off) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (((Submarine__onoff__rep.to_rep a.__split_fields.rec__submarine__warning__on_off) = (Submarine__onoff__rep.to_rep b.__split_fields.rec__submarine__warning__on_off))) then (
   True) else (
   False))

end

(* Module for axiomatizing type "warning" defined at submarine.ads:53, created in Gnat2Why.Types.Translate_Type *)
module Submarine__warning
 use export Submarine__warning__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type warning =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : warning) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : warning) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : warning.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : warning.
   ((object__alignment a) >= 0))
 
 function submarine__warning__on_off__first__bit 
   : int
 
 function submarine__warning__on_off__last__bit 
   : int
 
 function submarine__warning__on_off__position 
   : int
 
 axiom submarine__warning__on_off__first__bit_axiom :
  ((submarine__warning__on_off__first__bit ) >= 0)
 
 axiom submarine__warning__on_off__last__bit_axiom :
  ((submarine__warning__on_off__last__bit ) > (submarine__warning__on_off__first__bit ))
 
 axiom submarine__warning__on_off__position_axiom :
  ((submarine__warning__on_off__position ) >= 0)
 
 function user_eq 
   (a : warning) (b : warning) : bool
 
 function dummy 
   : warning
 
 type warning__ref =
  { mutable warning__content "model_trace:" "name:" : warning }
 
 function warning__ref___projection 
   (a : warning__ref) : warning =
  a.warning__content
 
 meta "model_projection" function warning__ref___projection
 
 meta "inline : no" function warning__ref___projection
 
 val warning__havoc 
   (x : warning__ref) : unit
  writes {x}

end

(* Module for defining the constant "a" defined at submarine.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine__invairanta__a
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__torpeadobay

 function a #"submarine.ads" 70 0 0#"model_projected" "name:A" "model_trace:3321" 
   : Array__Int__Submarine__torpeadobay.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at submarine.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__invairanta__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "invairanta" defined at submarine.ads:70, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__invairanta
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__torpeadobay

 function invairanta 
   (a : Array__Int__Submarine__torpeadobay.map) : bool
 
 predicate invairanta__function_guard 
   (result : bool) (a : Array__Int__Submarine__torpeadobay.map) 

end

(* Module for axiomatizing type "T37s" defined at submarine.ads:71, created in Gnat2Why.Types.Translate_Type *)
module Submarine__invairanta__L36s__T37s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t37s =
  < range 0 25 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  25
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t37s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t37s__ref =
  { mutable t37s__content "model_trace:" "name:" : t37s }
 
 function t37s__ref___projection 
   (a : t37s__ref) : t37s =
  a.t37s__content
 
 meta "model_projection" function t37s__ref___projection
 
 meta "inline : no" function t37s__ref___projection
 
 val t37s__havoc 
   (x : t37s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T37s" defined at submarine.ads:71, created in Gnat2Why.Types.Translate_Type *)
module Submarine__invairanta__L36s__T37s__rep
 use        Submarine__invairanta__L36s__T37s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__invairanta__L36s__T37s.t37s) : int =
  (Submarine__invairanta__L36s__T37s.t37s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__invairanta__L36s__T37s.t37s, 
 predicate in_range = Submarine__invairanta__L36s__T37s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T8s" defined at submarine.ads:71, created in Gnat2Why.Types.Translate_Type *)
module Submarine__invairanta__L7s__T8s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t8s =
  < range 0 25 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  25
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t8s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t8s__ref =
  { mutable t8s__content "model_trace:" "name:" : t8s }
 
 function t8s__ref___projection 
   (a : t8s__ref) : t8s =
  a.t8s__content
 
 meta "model_projection" function t8s__ref___projection
 
 meta "inline : no" function t8s__ref___projection
 
 val t8s__havoc 
   (x : t8s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T8s" defined at submarine.ads:71, created in Gnat2Why.Types.Translate_Type *)
module Submarine__invairanta__L7s__T8s__rep
 use        Submarine__invairanta__L7s__T8s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__invairanta__L7s__T8s.t8s) : int =
  (Submarine__invairanta__L7s__T8s.t8s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__invairanta__L7s__T8s.t8s, 
 predicate in_range = Submarine__invairanta__L7s__T8s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T39s" defined at submarine.ads:72, created in Gnat2Why.Types.Translate_Type *)
module Submarine__invairanta__L36s__L38s__T39s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__Tas_indexB
 use        Submarine__Tas_indexB__rep

 type t39s =
  Submarine__Tas_indexB.tas_indexB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t39s, 
 type rep_type = int, 
 function base_to_rep = Submarine__Tas_indexB__rep.to_rep, 
 function base_of_rep = Submarine__Tas_indexB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t39s__ref =
  { mutable t39s__content "model_trace:" "name:" : t39s }
 
 function t39s__ref___projection 
   (a : t39s__ref) : t39s =
  a.t39s__content
 
 meta "model_projection" function t39s__ref___projection
 
 meta "inline : no" function t39s__ref___projection
 
 val t39s__havoc 
   (x : t39s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10s" defined at submarine.ads:72, created in Gnat2Why.Types.Translate_Type *)
module Submarine__invairanta__L7s__L9s__T10s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__Tas_indexB
 use        Submarine__Tas_indexB__rep

 type t10s =
  Submarine__Tas_indexB.tas_indexB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Submarine__Tas_indexB__rep.to_rep, 
 function base_of_rep = Submarine__Tas_indexB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref =
  { mutable t10s__content "model_trace:" "name:" : t10s }
 
 function t10s__ref___projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref___projection
 
 meta "inline : no" function t10s__ref___projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T41s" defined at submarine.ads:152, created in Gnat2Why.Types.Translate_Type *)
module Submarine__loadalltorpeado__L40s__T41s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t41s =
  < range 0 25 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  25
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t41s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t41s__ref =
  { mutable t41s__content "model_trace:" "name:" : t41s }
 
 function t41s__ref___projection 
   (a : t41s__ref) : t41s =
  a.t41s__content
 
 meta "model_projection" function t41s__ref___projection
 
 meta "inline : no" function t41s__ref___projection
 
 val t41s__havoc 
   (x : t41s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T41s" defined at submarine.ads:152, created in Gnat2Why.Types.Translate_Type *)
module Submarine__loadalltorpeado__L40s__T41s__rep
 use        Submarine__loadalltorpeado__L40s__T41s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__loadalltorpeado__L40s__T41s.t41s) : int =
  (Submarine__loadalltorpeado__L40s__T41s.t41s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__loadalltorpeado__L40s__T41s.t41s, 
 predicate in_range = Submarine__loadalltorpeado__L40s__T41s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T43s" defined at submarine.ads:153, created in Gnat2Why.Types.Translate_Type *)
module Submarine__loadalltorpeado__L42s__T43s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t43s =
  < range 0 4 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t43s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t43s__ref =
  { mutable t43s__content "model_trace:" "name:" : t43s }
 
 function t43s__ref___projection 
   (a : t43s__ref) : t43s =
  a.t43s__content
 
 meta "model_projection" function t43s__ref___projection
 
 meta "inline : no" function t43s__ref___projection
 
 val t43s__havoc 
   (x : t43s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T43s" defined at submarine.ads:153, created in Gnat2Why.Types.Translate_Type *)
module Submarine__loadalltorpeado__L42s__T43s__rep
 use        Submarine__loadalltorpeado__L42s__T43s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__loadalltorpeado__L42s__T43s.t43s) : int =
  (Submarine__loadalltorpeado__L42s__T43s.t43s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__loadalltorpeado__L42s__T43s.t43s, 
 predicate in_range = Submarine__loadalltorpeado__L42s__T43s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T45s" defined at submarine.ads:154, created in Gnat2Why.Types.Translate_Type *)
module Submarine__loadalltorpeado__L44s__T45s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t45s =
  < range 0 4 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t45s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t45s__ref =
  { mutable t45s__content "model_trace:" "name:" : t45s }
 
 function t45s__ref___projection 
   (a : t45s__ref) : t45s =
  a.t45s__content
 
 meta "model_projection" function t45s__ref___projection
 
 meta "inline : no" function t45s__ref___projection
 
 val t45s__havoc 
   (x : t45s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T45s" defined at submarine.ads:154, created in Gnat2Why.Types.Translate_Type *)
module Submarine__loadalltorpeado__L44s__T45s__rep
 use        Submarine__loadalltorpeado__L44s__T45s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__loadalltorpeado__L44s__T45s.t45s) : int =
  (Submarine__loadalltorpeado__L44s__T45s.t45s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__loadalltorpeado__L44s__T45s.t45s, 
 predicate in_range = Submarine__loadalltorpeado__L44s__T45s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T47s" defined at submarine.ads:157, created in Gnat2Why.Types.Translate_Type *)
module Submarine__firevolley__L46s__T47s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t47s =
  < range 0 4 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t47s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t47s__ref =
  { mutable t47s__content "model_trace:" "name:" : t47s }
 
 function t47s__ref___projection 
   (a : t47s__ref) : t47s =
  a.t47s__content
 
 meta "model_projection" function t47s__ref___projection
 
 meta "inline : no" function t47s__ref___projection
 
 val t47s__havoc 
   (x : t47s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T47s" defined at submarine.ads:157, created in Gnat2Why.Types.Translate_Type *)
module Submarine__firevolley__L46s__T47s__rep
 use        Submarine__firevolley__L46s__T47s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__firevolley__L46s__T47s.t47s) : int =
  (Submarine__firevolley__L46s__T47s.t47s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__firevolley__L46s__T47s.t47s, 
 predicate in_range = Submarine__firevolley__L46s__T47s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T49s" defined at submarine.ads:158, created in Gnat2Why.Types.Translate_Type *)
module Submarine__firevolley__L48s__T49s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t49s =
  < range 0 4 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t49s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t49s__ref =
  { mutable t49s__content "model_trace:" "name:" : t49s }
 
 function t49s__ref___projection 
   (a : t49s__ref) : t49s =
  a.t49s__content
 
 meta "model_projection" function t49s__ref___projection
 
 meta "inline : no" function t49s__ref___projection
 
 val t49s__havoc 
   (x : t49s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T49s" defined at submarine.ads:158, created in Gnat2Why.Types.Translate_Type *)
module Submarine__firevolley__L48s__T49s__rep
 use        Submarine__firevolley__L48s__T49s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__firevolley__L48s__T49s.t49s) : int =
  (Submarine__firevolley__L48s__T49s.t49s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__firevolley__L48s__T49s.t49s, 
 predicate in_range = Submarine__firevolley__L48s__T49s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "ti" defined at submarine.ads:164, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine__firesingletorpeado__ti
 use import "_gnatprove_standard".Main

 function ti #"submarine.ads" 164 0 0#"model" "model_trace:3864" "name:TI" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ti" defined at submarine.ads:164, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__firesingletorpeado__ti___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "ti" defined at submarine.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine__loadchamber__ti
 use import "_gnatprove_standard".Main

 function ti #"submarine.ads" 169 0 0#"model" "name:TI" "model_trace:3907" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ti" defined at submarine.ads:169, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadchamber__ti___axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining a ref holding the value of variable "currentdepth" defined at submarine.ads:7, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__currentdepth
 use import "_gnatprove_standard".Main

 val currentdepth #"submarine.ads" 7 0 0#"model_projected" "model_trace:2896" "name:CurrentDepth"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currentdepth" defined at submarine.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__currentdepth___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "maxdepth" defined at submarine.ads:8, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__maxdepth
 use import "_gnatprove_standard".Main

 val maxdepth #"submarine.ads" 8 0 0#"model_projected" "model_trace:2910" "name:maxDepth"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "maxdepth" defined at submarine.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__maxdepth___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "oxygenlevel" defined at submarine.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__oxygenlevel
 use import "_gnatprove_standard".Main

 val oxygenlevel #"submarine.ads" 13 0 0#"model_projected" "model_trace:2933" "name:OxygenLevel"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "oxygenlevel" defined at submarine.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__oxygenlevel___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "warninglevel" defined at submarine.ads:14, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__warninglevel
 use import "_gnatprove_standard".Main

 val warninglevel #"submarine.ads" 14 0 0#"model_projected" "model_trace:2945" "name:warningLevel"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "warninglevel" defined at submarine.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__warninglevel___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "emptyoxygen" defined at submarine.ads:15, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__emptyoxygen
 use import "_gnatprove_standard".Main

 val emptyoxygen #"submarine.ads" 15 0 0#"model_projected" "model_trace:2961" "name:EmptyOxygen"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "emptyoxygen" defined at submarine.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__emptyoxygen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "currenttemp" defined at submarine.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__currenttemp
 use import "_gnatprove_standard".Main

 val currenttemp #"submarine.ads" 20 0 0#"model_projected" "model_trace:2984" "name:currentTemp"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currenttemp" defined at submarine.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__currenttemp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "maxsafetemp" defined at submarine.ads:21, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__maxsafetemp
 use import "_gnatprove_standard".Main

 val maxsafetemp #"submarine.ads" 21 0 0#"model_projected" "model_trace:2998" "name:maxSafeTemp"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "maxsafetemp" defined at submarine.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__maxsafetemp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "warningtemp" defined at submarine.ads:22, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__warningtemp
 use import "_gnatprove_standard".Main

 val warningtemp #"submarine.ads" 22 0 0#"model_projected" "model_trace:3014" "name:warningTemp"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "warningtemp" defined at submarine.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__warningtemp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "doorinner" defined at submarine.ads:49, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__doorinner
 use import "_gnatprove_standard".Main
 use        Submarine__door

 val doorinner__split_fields #"submarine.ads" 49 0 0#"model_projected" "model_trace:3204" "name:DoorInner"  : Submarine__door.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "doorinner" defined at submarine.ads:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__doorinner___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "doorouter" defined at submarine.ads:50, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__doorouter
 use import "_gnatprove_standard".Main
 use        Submarine__door

 val doorouter__split_fields #"submarine.ads" 50 0 0#"model_projected" "model_trace:3220" "name:DoorOuter"  : Submarine__door.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "doorouter" defined at submarine.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__doorouter___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "o2warning" defined at submarine.ads:58, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__o2warning
 use import "_gnatprove_standard".Main
 use        Submarine__warning

 val o2warning__split_fields #"submarine.ads" 58 0 0#"model_projected" "model_trace:3258" "name:O2Warning"  : Submarine__warning.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "o2warning" defined at submarine.ads:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__o2warning___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "tempwarning" defined at submarine.ads:59, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__tempwarning
 use import "_gnatprove_standard".Main
 use        Submarine__warning

 val tempwarning__split_fields #"submarine.ads" 59 0 0#"model_projected" "model_trace:3271" "name:TempWarning"  : Submarine__warning.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "tempwarning" defined at submarine.ads:59, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__tempwarning___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at submarine.ads:63, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__popammo__a
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__torpeadobay

 val a #"submarine.ads" 63 0 0#"model_projected" "model_trace:3291" "name:A"  : Array__Int__Submarine__torpeadobay.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at submarine.ads:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__popammo__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at submarine.ads:151, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__loadalltorpeado__a
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__torpeadobay

 val a #"submarine.ads" 151 0 0#"model_projected" "name:A" "model_trace:3725"  : Array__Int__Submarine__torpeadobay.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at submarine.ads:151, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadalltorpeado__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "c" defined at submarine.ads:151, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__loadalltorpeado__c
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__torpeadobay

 val c #"submarine.ads" 151 0 0#"model_projected" "model_trace:3734" "name:C"  : Array__Int__Submarine__torpeadobay.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at submarine.ads:151, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadalltorpeado__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "c" defined at submarine.ads:156, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__firevolley__c
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__torpeadobay

 val c #"submarine.ads" 156 0 0#"model_projected" "name:C" "model_trace:3808"  : Array__Int__Submarine__torpeadobay.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at submarine.ads:156, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__firevolley__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "c" defined at submarine.ads:164, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__firesingletorpeado__c
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__torpeadobay

 val c #"submarine.ads" 164 0 0#"model_projected" "name:C" "model_trace:3873"  : Array__Int__Submarine__torpeadobay.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at submarine.ads:164, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__firesingletorpeado__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "c" defined at submarine.ads:169, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__loadchamber__c
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__torpeadobay

 val c #"submarine.ads" 169 0 0#"model_projected" "name:C" "model_trace:3916"  : Array__Int__Submarine__torpeadobay.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at submarine.ads:169, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadchamber__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at submarine.adb:223, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__loadalltorpeado__i
 use import "_gnatprove_standard".Main

 val i #"submarine.adb" 223 0 0#"model_projected" "model_trace:2628" "name:i"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at submarine.adb:223, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadalltorpeado__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at submarine.adb:224, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__loadalltorpeado__j
 use import "_gnatprove_standard".Main

 val j #"submarine.adb" 224 0 0#"model_projected" "model_trace:2640" "name:j"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at submarine.adb:224, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadalltorpeado__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "firsttorpeadoindex" defined at submarine.adb:226, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__loadalltorpeado__firsttorpeadoindex
 use import "_gnatprove_standard".Main

 val firsttorpeadoindex #"submarine.adb" 226 0 0#"model_projected" "model_trace:2652" "name:FirstTorpeadoindex"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "firsttorpeadoindex" defined at submarine.adb:226, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadalltorpeado__firsttorpeadoindex___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at submarine.adb:250, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__firevolley__i
 use import "_gnatprove_standard".Main

 val i #"submarine.adb" 250 0 0#"model_projected" "name:i" "model_trace:2728"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at submarine.adb:250, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__firevolley__i___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "popammo" defined at submarine.ads:63, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__popammo
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "openinnerdoor" defined at submarine.ads:77, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__openinnerdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "closeinnerdoor" defined at submarine.ads:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__closeinnerdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "openouterdoor" defined at submarine.ads:91, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__openouterdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "closeouterdoor" defined at submarine.ads:98, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__closeouterdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "initiateo2warning" defined at submarine.ads:111, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__initiateo2warning
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "checkoxygen" defined at submarine.ads:116, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__checkoxygen
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "initiatetempwarning" defined at submarine.ads:120, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__initiatetempwarning
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "checkrectortemp" defined at submarine.ads:125, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__checkrectortemp
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "surface" defined at submarine.ads:135, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__surface
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "dive" defined at submarine.ads:141, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__dive
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "loadalltorpeado" defined at submarine.ads:151, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__loadalltorpeado
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "firevolley" defined at submarine.ads:156, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__firevolley
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "firesingletorpeado" defined at submarine.ads:164, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__firesingletorpeado
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "loadchamber" defined at submarine.ads:169, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__loadchamber
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_1" defined at submarine.adb:197, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Submarine__surface__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at submarine.adb:197, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__surface__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at submarine.adb:209, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Submarine__dive__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at submarine.adb:209, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__dive__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_3" defined at submarine.adb:230, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Submarine__loadalltorpeado__L_3
 use import "_gnatprove_standard".Main

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at submarine.adb:230, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadalltorpeado__L_3___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_4" defined at submarine.adb:239, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Submarine__loadalltorpeado__L_4
 use import "_gnatprove_standard".Main

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at submarine.adb:239, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadalltorpeado__L_4___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_5" defined at submarine.adb:253, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Submarine__firevolley__L_5
 use import "_gnatprove_standard".Main

 exception L_5

end

(* Module giving an empty axiom for the entity "L_5" defined at submarine.adb:253, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__firevolley__L_5___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TdepthB" defined at submarine.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__TdepthB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "depth" defined at submarine.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__depth___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__depth

 predicate dynamic_invariant "inline" 
   (temp___expr_159 : int) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool)  =
  (if (( temp___is_init_155 \/ (Submarine__depth.first <= Submarine__depth.last) )) then (
   (Submarine__depth.dynamic_property Submarine__depth.first Submarine__depth.last temp___expr_159)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_160 : int) (temp___skip_top_level_161 : bool)  =
  true

end

(* Module giving axioms for type "ToxygenB" defined at submarine.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__ToxygenB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "oxygen" defined at submarine.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__oxygen___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__oxygen

 predicate dynamic_invariant "inline" 
   (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool)  =
  (if (( temp___is_init_162 \/ (Submarine__oxygen.first <= Submarine__oxygen.last) )) then (
   (Submarine__oxygen.dynamic_property Submarine__oxygen.first Submarine__oxygen.last temp___expr_166)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_167 : int) (temp___skip_top_level_168 : bool)  =
  true

end

(* Module giving axioms for type "TtemperatureB" defined at submarine.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__TtemperatureB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "temperature" defined at submarine.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__temperature___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__temperature

 predicate dynamic_invariant "inline" 
   (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool)  =
  (if (( temp___is_init_169 \/ (Submarine__temperature.first <= Submarine__temperature.last) )) then (
   (Submarine__temperature.dynamic_property Submarine__temperature.first Submarine__temperature.last temp___expr_173)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_174 : int) (temp___skip_top_level_175 : bool)  =
  true

end

(* Module giving axioms for type "torpeadobay" defined at submarine.ads:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__torpeadobay___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay

 predicate dynamic_invariant "inline" 
   (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool)  =
  (if (( temp___is_init_176 \/ (Submarine__torpeadobay.first <= Submarine__torpeadobay.last) )) then (
   (Submarine__torpeadobay.dynamic_property Submarine__torpeadobay.first Submarine__torpeadobay.last temp___expr_180)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_181 : int) (temp___skip_top_level_182 : bool)  =
  true

end

(* Module giving axioms for type "Tas_indexB" defined at submarine.ads:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__Tas_indexB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "as_index" defined at submarine.ads:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__as_index___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__as_index

 predicate dynamic_invariant "inline" 
   (temp___expr_187 : int) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool)  =
  (if (( temp___is_init_183 \/ (Submarine__as_index.first <= Submarine__as_index.last) )) then (
   (Submarine__as_index.dynamic_property Submarine__as_index.first Submarine__as_index.last temp___expr_187)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_188 : int) (temp___skip_top_level_189 : bool)  =
  true

end

(* Module giving axioms for type "TammostoreB" defined at submarine.ads:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__TammostoreB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ammostore" defined at submarine.ads:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__ammostore___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__torpeadobay
 use        Array__Int__Submarine__torpeadobay

 predicate dynamic_invariant "inline" 
   (temp___expr_194 : Array__Int__Submarine__torpeadobay.map) (temp___is_init_190 : bool) (temp___skip_constant_191 : bool) (temp___do_toplevel_192 : bool) (temp___do_typ_inv_193 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_196 : Array__Int__Submarine__torpeadobay.map) (temp___skip_top_level_197 : bool)  =
  true

end

(* Module giving axioms for type "Tchambered_indexB" defined at submarine.ads:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__Tchambered_indexB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "chambered_index" defined at submarine.ads:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__chambered_index___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__chambered_index

 predicate dynamic_invariant "inline" 
   (temp___expr_204 : int) (temp___is_init_200 : bool) (temp___skip_constant_201 : bool) (temp___do_toplevel_202 : bool) (temp___do_typ_inv_203 : bool)  =
  (if (( temp___is_init_200 \/ (Submarine__chambered_index.first <= Submarine__chambered_index.last) )) then (
   (Submarine__chambered_index.dynamic_property Submarine__chambered_index.first Submarine__chambered_index.last temp___expr_204)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_205 : int) (temp___skip_top_level_206 : bool)  =
  true

end

(* Module giving axioms for type "TchambersB" defined at submarine.ads:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__TchambersB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "chambers" defined at submarine.ads:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__chambers___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__torpeadobay
 use        Array__Int__Submarine__torpeadobay

 predicate dynamic_invariant "inline" 
   (temp___expr_211 : Array__Int__Submarine__torpeadobay.map) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_213 : Array__Int__Submarine__torpeadobay.map) (temp___skip_top_level_214 : bool)  =
  true

end

(* Module giving axioms for type "openclose" defined at submarine.ads:37, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__openclose___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__openclose

 predicate dynamic_invariant "inline" 
   (temp___expr_221 : int) (temp___is_init_217 : bool) (temp___skip_constant_218 : bool) (temp___do_toplevel_219 : bool) (temp___do_typ_inv_220 : bool)  =
  (if (( temp___is_init_217 \/ (Submarine__openclose.first <= Submarine__openclose.last) )) then (
   (Submarine__openclose.dynamic_property Submarine__openclose.first Submarine__openclose.last temp___expr_221)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_222 : int) (temp___skip_top_level_223 : bool)  =
  true

end

(* Module giving axioms for type "lock" defined at submarine.ads:38, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__lock___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__lock

 predicate dynamic_invariant "inline" 
   (temp___expr_228 : int) (temp___is_init_224 : bool) (temp___skip_constant_225 : bool) (temp___do_toplevel_226 : bool) (temp___do_typ_inv_227 : bool)  =
  (if (( temp___is_init_224 \/ (Submarine__lock.first <= Submarine__lock.last) )) then (
   (Submarine__lock.dynamic_property Submarine__lock.first Submarine__lock.last temp___expr_228)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_229 : int) (temp___skip_top_level_230 : bool)  =
  true

end

(* Module giving axioms for type "onoff" defined at submarine.ads:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__onoff___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__onoff

 predicate dynamic_invariant "inline" 
   (temp___expr_235 : int) (temp___is_init_231 : bool) (temp___skip_constant_232 : bool) (temp___do_toplevel_233 : bool) (temp___do_typ_inv_234 : bool)  =
  (if (( temp___is_init_231 \/ (Submarine__onoff.first <= Submarine__onoff.last) )) then (
   (Submarine__onoff.dynamic_property Submarine__onoff.first Submarine__onoff.last temp___expr_235)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_236 : int) (temp___skip_top_level_237 : bool)  =
  true

end

(* Module giving axioms for type "door" defined at submarine.ads:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__door___axiom
 use import "_gnatprove_standard".Main
 use        Submarine__door

 predicate dynamic_invariant "inline" 
   (temp___expr_242 : Submarine__door.door) (temp___is_init_238 : bool) (temp___skip_constant_239 : bool) (temp___do_toplevel_240 : bool) (temp___do_typ_inv_241 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_243 : Submarine__door.door) (temp___skip_top_level_244 : bool)  =
  true

end

(* Module giving axioms for type "warning" defined at submarine.ads:53, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__warning___axiom
 use import "_gnatprove_standard".Main
 use        Submarine__warning

 predicate dynamic_invariant "inline" 
   (temp___expr_251 : Submarine__warning.warning) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_252 : Submarine__warning.warning) (temp___skip_top_level_253 : bool)  =
  true

end

(* Module giving axioms for type "T37s" defined at submarine.ads:71, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__invairanta__L36s__T37s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T8s" defined at submarine.ads:71, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__invairanta__L7s__T8s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T39s" defined at submarine.ads:72, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__invairanta__L36s__L38s__T39s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T10s" defined at submarine.ads:72, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__invairanta__L7s__L9s__T10s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T41s" defined at submarine.ads:152, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__loadalltorpeado__L40s__T41s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T43s" defined at submarine.ads:153, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__loadalltorpeado__L42s__T43s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T45s" defined at submarine.ads:154, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__loadalltorpeado__L44s__T45s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T47s" defined at submarine.ads:157, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__firevolley__L46s__T47s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T49s" defined at submarine.ads:158, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__firevolley__L48s__T49s___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving a program function and a defining axiom for the expression function "invairanta" defined at submarine.ads:70, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Submarine__invairanta___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__invairanta
 use        Submarine__torpeadobay
 use        Submarine__torpeadobay__rep
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__ammostore___axiom
 use        Array__Int__Submarine__torpeadobay
 use        Array__Int__Submarine__torpeadobay
 use        Array__Int__Submarine__torpeadobay

 val invairanta 
   (a : Array__Int__Submarine__torpeadobay.map) : bool
  requires {  true }
  ensures {  ( ( (result = (Submarine__invairanta.invairanta a)) /\ (Submarine__invairanta.invairanta__function_guard result a) ) /\ ( (result = True) <-> (exists i  : int.
   ( ( (0 <= i) /\ (i <= 25) ) /\ ( ( (i < 25) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get a i)) <> (Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get a (i - 1)))) ) /\ (forall j   "model" "name:j" "model_trace:3361"  : int.
    ( ( (i <= j) /\ (j <= 25) ) -> ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get a j)) = (Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get a i))) )) ) )) ) ) }
 
 axiom invairanta__post_axiom :
  (forall a   : Array__Int__Submarine__torpeadobay.map [(Submarine__invairanta.invairanta a)].
   ( (Submarine__ammostore___axiom.dynamic_invariant a True True True True) -> (let result = (Submarine__invairanta.invairanta a) in (
    (if ((Submarine__invairanta.invairanta__function_guard result a)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))
 
 axiom invairanta__def_axiom :
  (forall a   : Array__Int__Submarine__torpeadobay.map [(Submarine__invairanta.invairanta a)].
   ( (let result = (Submarine__invairanta.invairanta a) in (
    (Submarine__invairanta.invairanta__function_guard result a)))
    -> ( ((Submarine__invairanta.invairanta a) = True) <-> (exists i  : int.
    ( ( (0 <= i) /\ (i <= 25) ) /\ ( ( (i < 25) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get a i)) <> (Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get a (i - 1)))) ) /\ (forall j   "model" "name:j" "model_trace:3361"  : int.
     ( ( (i <= j) /\ (j <= 25) ) -> ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get a j)) = (Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get a i))) )) ) )) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "popammo" defined at submarine.ads:63, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__popammo___axiom
 use import "_gnatprove_standard".Main
 use        Submarine__invairanta
 use        Submarine__ammostore___axiom
 use        Array__Int__Submarine__torpeadobay

 val popammo 
   (a : Array__Int__Submarine__torpeadobay.map__ref) : unit
  requires {  ((epsilon temp___result_257 : bool.
   ( (temp___result_257 = (Submarine__invairanta.invairanta a.Array__Int__Submarine__torpeadobay.map__content)) /\ (Submarine__invairanta.invairanta__function_guard temp___result_257 a.Array__Int__Submarine__torpeadobay.map__content) )) = True) }
  ensures {  ( ((epsilon temp___result_258 : bool.
   ( (temp___result_258 = (Submarine__invairanta.invairanta a.Array__Int__Submarine__torpeadobay.map__content)) /\ (Submarine__invairanta.invairanta__function_guard temp___result_258 a.Array__Int__Submarine__torpeadobay.map__content) )) = True) /\ (Submarine__ammostore___axiom.dynamic_invariant a.Array__Int__Submarine__torpeadobay.map__content True True True True) ) }
  writes {a}

end

(* Module for declaring a program function (and possibly an axiom) for "openinnerdoor" defined at submarine.ads:77, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__openinnerdoor___axiom
 use        Submarine__doorinner
 use        Submarine__doorouter
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__openclose
 use        Submarine__openclose__rep
 use        Submarine__lock
 use        Submarine__lock__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__doorinner
 use        Submarine__doorouter

 val openinnerdoor 
   (__void_param : unit) : unit
  requires {  ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 1) }
  ensures {  ( ( ( ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 0) /\ ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 1) ) /\ ((Submarine__lock__rep.to_rep (Submarine__door.rec__submarine__door__locked_unlocked (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 1) ) /\ ( (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content } True True True True) /\ (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content } True True True True) ) ) }
  reads {Submarine__doorinner.doorinner__split_fields, Submarine__doorouter.doorouter__split_fields}
  writes {Submarine__doorinner.doorinner__split_fields, Submarine__doorouter.doorouter__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "closeinnerdoor" defined at submarine.ads:84, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__closeinnerdoor___axiom
 use        Submarine__doorinner
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__openclose
 use        Submarine__openclose__rep
 use        Submarine__lock
 use        Submarine__lock__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__doorinner

 val closeinnerdoor 
   (__void_param : unit) : unit
  requires {  ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 0) }
  ensures {  ( ( ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 1) /\ ((Submarine__lock__rep.to_rep (Submarine__door.rec__submarine__door__locked_unlocked (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 0) ) /\ (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content } True True True True) ) }
  reads {Submarine__doorinner.doorinner__split_fields}
  writes {Submarine__doorinner.doorinner__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "openouterdoor" defined at submarine.ads:91, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__openouterdoor___axiom
 use        Submarine__doorinner
 use        Submarine__doorouter
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__openclose
 use        Submarine__openclose__rep
 use        Submarine__lock
 use        Submarine__lock__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__doorinner
 use        Submarine__doorouter

 val openouterdoor 
   (__void_param : unit) : unit
  requires {  ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 1) }
  ensures {  ( ( ( ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 0) /\ ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 1) ) /\ ((Submarine__lock__rep.to_rep (Submarine__door.rec__submarine__door__locked_unlocked (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 1) ) /\ ( (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content } True True True True) /\ (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content } True True True True) ) ) }
  reads {Submarine__doorinner.doorinner__split_fields, Submarine__doorouter.doorouter__split_fields}
  writes {Submarine__doorinner.doorinner__split_fields, Submarine__doorouter.doorouter__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "closeouterdoor" defined at submarine.ads:98, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__closeouterdoor___axiom
 use        Submarine__doorouter
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__openclose
 use        Submarine__openclose__rep
 use        Submarine__lock
 use        Submarine__lock__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__doorouter

 val closeouterdoor 
   (__void_param : unit) : unit
  requires {  ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 0) }
  ensures {  ( ( ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 1) /\ ((Submarine__lock__rep.to_rep (Submarine__door.rec__submarine__door__locked_unlocked (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 0) ) /\ (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content } True True True True) ) }
  reads {Submarine__doorouter.doorouter__split_fields}
  writes {Submarine__doorouter.doorouter__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "initiateo2warning" defined at submarine.ads:111, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__initiateo2warning___axiom
 use        Submarine__o2warning
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__onoff
 use        Submarine__onoff__rep
 use        Submarine__warning
 use        Submarine__warning___axiom
 use        Submarine__o2warning

 val initiateo2warning 
   (__void_param : unit) : unit
  requires {  ((Submarine__onoff__rep.to_rep (Submarine__warning.rec__submarine__warning__on_off (Submarine__warning.__split_fields { Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content }))) = 1) }
  ensures {  ( ((Submarine__onoff__rep.to_rep (Submarine__warning.rec__submarine__warning__on_off (Submarine__warning.__split_fields { Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content }))) = 0) /\ (Submarine__warning___axiom.dynamic_invariant { Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content } True True True True) ) }
  reads {Submarine__o2warning.o2warning__split_fields}
  writes {Submarine__o2warning.o2warning__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "checkoxygen" defined at submarine.ads:116, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__checkoxygen___axiom
 use        Submarine__oxygenlevel
 use        Submarine__o2warning
 use        Submarine__warninglevel
 use        Submarine__currentdepth
 use        Submarine__emptyoxygen
 use import "_gnatprove_standard".Main
 use        Submarine__depth___axiom
 use        Submarine__currentdepth
 use        Submarine__oxygenlevel
 use        Submarine__warninglevel
 use        Submarine__emptyoxygen
 use        Submarine__warning
 use        Submarine__warning___axiom
 use        Submarine__o2warning

 val checkoxygen 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( (Submarine__warning___axiom.dynamic_invariant { Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content } True True True True) /\ (Submarine__depth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True True True True) ) }
  reads {Submarine__currentdepth.currentdepth, Submarine__oxygenlevel.oxygenlevel, Submarine__warninglevel.warninglevel, Submarine__emptyoxygen.emptyoxygen, Submarine__o2warning.o2warning__split_fields}
  writes {Submarine__currentdepth.currentdepth, Submarine__o2warning.o2warning__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "initiatetempwarning" defined at submarine.ads:120, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__initiatetempwarning___axiom
 use        Submarine__tempwarning
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__onoff
 use        Submarine__onoff__rep
 use        Submarine__warning
 use        Submarine__warning___axiom
 use        Submarine__tempwarning

 val initiatetempwarning 
   (__void_param : unit) : unit
  requires {  ((Submarine__onoff__rep.to_rep (Submarine__warning.rec__submarine__warning__on_off (Submarine__warning.__split_fields { Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content }))) = 1) }
  ensures {  ( ((Submarine__onoff__rep.to_rep (Submarine__warning.rec__submarine__warning__on_off (Submarine__warning.__split_fields { Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content }))) = 0) /\ (Submarine__warning___axiom.dynamic_invariant { Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content } True True True True) ) }
  reads {Submarine__tempwarning.tempwarning__split_fields}
  writes {Submarine__tempwarning.tempwarning__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "checkrectortemp" defined at submarine.ads:125, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__checkrectortemp___axiom
 use        Submarine__currenttemp
 use        Submarine__maxsafetemp
 use        Submarine__currentdepth
 use        Submarine__tempwarning
 use        Submarine__warningtemp
 use import "_gnatprove_standard".Main
 use        Submarine__depth___axiom
 use        Submarine__currentdepth
 use        Submarine__currenttemp
 use        Submarine__maxsafetemp
 use        Submarine__warningtemp
 use        Submarine__warning
 use        Submarine__warning___axiom
 use        Submarine__tempwarning

 val checkrectortemp 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( (Submarine__depth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True True True True) /\ (Submarine__warning___axiom.dynamic_invariant { Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content } True True True True) ) }
  reads {Submarine__currentdepth.currentdepth, Submarine__currenttemp.currenttemp, Submarine__maxsafetemp.maxsafetemp, Submarine__warningtemp.warningtemp, Submarine__tempwarning.tempwarning__split_fields}
  writes {Submarine__currentdepth.currentdepth, Submarine__tempwarning.tempwarning__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "surface" defined at submarine.ads:135, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__surface___axiom
 use        Submarine__currentdepth
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__depth___axiom
 use        Submarine__currentdepth

 val surface 
   (__void_param : unit) : unit
  requires {  (Submarine__currentdepth.currentdepth.int__content >= 0) }
  ensures {  ( (Submarine__currentdepth.currentdepth.int__content <= 0) /\ (Submarine__depth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True True True True) ) }
  reads {Submarine__currentdepth.currentdepth}
  writes {Submarine__currentdepth.currentdepth}

end

(* Module for declaring a program function (and possibly an axiom) for "dive" defined at submarine.ads:141, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__dive___axiom
 use        Submarine__currentdepth
 use        Submarine__maxdepth
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__depth___axiom
 use        Submarine__currentdepth
 use        Submarine__maxdepth

 val dive 
   (__void_param : unit) : unit
  requires {  (Submarine__currentdepth.currentdepth.int__content <= Submarine__maxdepth.maxdepth.int__content) }
  ensures {  ( (Submarine__currentdepth.currentdepth.int__content <= Submarine__maxdepth.maxdepth.int__content) /\ (Submarine__depth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True True True True) ) }
  reads {Submarine__currentdepth.currentdepth, Submarine__maxdepth.maxdepth}
  writes {Submarine__currentdepth.currentdepth}

end

(* Module for declaring a program function (and possibly an axiom) for "loadalltorpeado" defined at submarine.ads:151, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__loadalltorpeado___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay
 use        Submarine__torpeadobay__rep
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__ammostore___axiom
 use        Submarine__chambers___axiom
 use        Array__Int__Submarine__torpeadobay
 use        Array__Int__Submarine__torpeadobay

 val loadalltorpeado 
   (a : Array__Int__Submarine__torpeadobay.map__ref) (c : Array__Int__Submarine__torpeadobay.map__ref) : unit
  requires {  ( (exists j  : int.
   ( ( (0 <= j) /\ (j <= 25) ) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get a.Array__Int__Submarine__torpeadobay.map__content j)) = 0) )) /\ (exists k  : int.
   ( ( (0 <= k) /\ (k <= 4) ) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get c.Array__Int__Submarine__torpeadobay.map__content k)) = 1) )) ) }
  ensures {  ( (exists i  : int.
   ( ( (0 <= i) /\ (i <= 4) ) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get c.Array__Int__Submarine__torpeadobay.map__content i)) = 0) )) /\ ( (Submarine__ammostore___axiom.dynamic_invariant a.Array__Int__Submarine__torpeadobay.map__content True True True True) /\ (Submarine__chambers___axiom.dynamic_invariant c.Array__Int__Submarine__torpeadobay.map__content True True True True) ) ) }
  writes {a, c}

end

(* Module for declaring a program function (and possibly an axiom) for "firevolley" defined at submarine.ads:156, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__firevolley___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay
 use        Submarine__torpeadobay__rep
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__chambers___axiom
 use        Array__Int__Submarine__torpeadobay

 val firevolley 
   (c : Array__Int__Submarine__torpeadobay.map__ref) : unit
  requires {  (exists i  : int.
   ( ( (0 <= i) /\ (i <= 4) ) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get c.Array__Int__Submarine__torpeadobay.map__content i)) = 0) )) }
  ensures {  ( (forall j   "model" "name:j" "model_trace:3842"  : int.
   ( ( (0 <= j) /\ (j <= 4) ) -> ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get c.Array__Int__Submarine__torpeadobay.map__content j)) = 1) )) /\ (Submarine__chambers___axiom.dynamic_invariant c.Array__Int__Submarine__torpeadobay.map__content True True True True) ) }
  writes {c}

end

(* Module for declaring a program function (and possibly an axiom) for "firesingletorpeado" defined at submarine.ads:164, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__firesingletorpeado___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay
 use        Submarine__torpeadobay__rep
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__chambers___axiom
 use        Array__Int__Submarine__torpeadobay

 val firesingletorpeado 
   (ti : int) (c : Array__Int__Submarine__torpeadobay.map__ref) : unit
  requires {  ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get c.Array__Int__Submarine__torpeadobay.map__content ti)) = 0) }
  ensures {  ( ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get c.Array__Int__Submarine__torpeadobay.map__content ti)) = 1) /\ (Submarine__chambers___axiom.dynamic_invariant c.Array__Int__Submarine__torpeadobay.map__content True True True True) ) }
  writes {c}

end

(* Module for declaring a program function (and possibly an axiom) for "loadchamber" defined at submarine.ads:169, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__loadchamber___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay
 use        Submarine__torpeadobay__rep
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__chambers___axiom
 use        Array__Int__Submarine__torpeadobay

 val loadchamber 
   (ti : int) (c : Array__Int__Submarine__torpeadobay.map__ref) : unit
  requires {  ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get c.Array__Int__Submarine__torpeadobay.map__content ti)) = 1) }
  ensures {  ( ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get c.Array__Int__Submarine__torpeadobay.map__content ti)) = 0) /\ (Submarine__chambers___axiom.dynamic_invariant c.Array__Int__Submarine__torpeadobay.map__content True True True True) ) }
  writes {c}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "submarine" defined at submarine.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Submarine__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__depth___axiom
 use        Submarine__currentdepth
 use        Submarine__maxdepth
 use        Submarine__oxygen___axiom
 use        Submarine__oxygenlevel
 use        Submarine__warninglevel
 use        Submarine__emptyoxygen
 use        Submarine__temperature___axiom
 use        Submarine__currenttemp
 use        Submarine__maxsafetemp
 use        Submarine__warningtemp
 use        Submarine__openclose
 use        Submarine__openclose__rep
 use        Submarine__lock
 use        Submarine__lock__rep
 use        Submarine__onoff
 use        Submarine__onoff__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__doorinner
 use        Submarine__doorouter
 use        Submarine__warning
 use        Submarine__warning___axiom
 use        Submarine__o2warning
 use        Submarine__tempwarning
 use        Submarine__depth___axiom
 use        Submarine__currentdepth___axiom
 use        Submarine__maxdepth___axiom
 use        Submarine__oxygen___axiom
 use        Submarine__oxygenlevel___axiom
 use        Submarine__warninglevel___axiom
 use        Submarine__emptyoxygen___axiom
 use        Submarine__temperature___axiom
 use        Submarine__currenttemp___axiom
 use        Submarine__maxsafetemp___axiom
 use        Submarine__warningtemp___axiom
 use        Submarine__openclose___axiom
 use        Submarine__lock___axiom
 use        Submarine__onoff___axiom
 use        Submarine__door___axiom
 use        Submarine__doorinner___axiom
 use        Submarine__doorouter___axiom
 use        Submarine__warning___axiom
 use        Submarine__o2warning___axiom
 use        Submarine__tempwarning___axiom

 let def #"submarine.ads" 1 0 0#"GP_Subp:submarine.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"submarine.ads" 1 0 0# true }
  ensures { #"submarine.ads" 1 0 0# true }
   =
  ( (#"submarine.ads" 2 0 0# ());
  (#"submarine.ads" 6 0 0# ());
  (#"submarine.ads" 7 0 0# ());
  (#"submarine.ads" 7 0 0# ());
  (#"submarine.ads" 7 0 0# ( #"submarine.ads" 7 0 0# Submarine__currentdepth.currentdepth.int__content <- ( 500 );
  #"submarine.ads" 7 0 0# assume { #"submarine.ads" 7 0 0# (Submarine__depth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True False True True) } ));
  (#"submarine.ads" 8 0 0# ( #"submarine.ads" 8 0 0# Submarine__maxdepth.maxdepth.int__content <- ( 1000 );
  #"submarine.ads" 8 0 0# assume { #"submarine.ads" 8 0 0# (Submarine__depth___axiom.dynamic_invariant Submarine__maxdepth.maxdepth.int__content True False True True) } ));
  (#"submarine.ads" 12 0 0# ());
  (#"submarine.ads" 13 0 0# ());
  (#"submarine.ads" 13 0 0# ());
  (#"submarine.ads" 13 0 0# ( #"submarine.ads" 13 0 0# Submarine__oxygenlevel.oxygenlevel.int__content <- ( 100 );
  #"submarine.ads" 13 0 0# assume { #"submarine.ads" 13 0 0# (Submarine__oxygen___axiom.dynamic_invariant Submarine__oxygenlevel.oxygenlevel.int__content True False True True) } ));
  (#"submarine.ads" 14 0 0# ( #"submarine.ads" 14 0 0# Submarine__warninglevel.warninglevel.int__content <- ( 10 );
  #"submarine.ads" 14 0 0# assume { #"submarine.ads" 14 0 0# (Submarine__oxygen___axiom.dynamic_invariant Submarine__warninglevel.warninglevel.int__content True False True True) } ));
  (#"submarine.ads" 15 0 0# ( #"submarine.ads" 15 0 0# Submarine__emptyoxygen.emptyoxygen.int__content <- ( 0 );
  #"submarine.ads" 15 0 0# assume { #"submarine.ads" 15 0 0# (Submarine__oxygen___axiom.dynamic_invariant Submarine__emptyoxygen.emptyoxygen.int__content True False True True) } ));
  (#"submarine.ads" 19 0 0# ());
  (#"submarine.ads" 20 0 0# ());
  (#"submarine.ads" 20 0 0# ());
  (#"submarine.ads" 20 0 0# ( #"submarine.ads" 20 0 0# Submarine__currenttemp.currenttemp.int__content <- ( 1000 );
  #"submarine.ads" 20 0 0# assume { #"submarine.ads" 20 0 0# (Submarine__temperature___axiom.dynamic_invariant Submarine__currenttemp.currenttemp.int__content True False True True) } ));
  (#"submarine.ads" 21 0 0# ( #"submarine.ads" 21 0 0# Submarine__maxsafetemp.maxsafetemp.int__content <- ( 1800 );
  #"submarine.ads" 21 0 0# assume { #"submarine.ads" 21 0 0# (Submarine__temperature___axiom.dynamic_invariant Submarine__maxsafetemp.maxsafetemp.int__content True False True True) } ));
  (#"submarine.ads" 22 0 0# ( #"submarine.ads" 22 0 0# Submarine__warningtemp.warningtemp.int__content <- ( 1600 );
  #"submarine.ads" 22 0 0# assume { #"submarine.ads" 22 0 0# (Submarine__temperature___axiom.dynamic_invariant Submarine__warningtemp.warningtemp.int__content True False True True) } ));
  (#"submarine.ads" 25 0 0# ());
  (#"submarine.ads" 29 0 0# ());
  (#"submarine.ads" 30 0 0# ());
  (#"submarine.ads" 33 0 0# ());
  (#"submarine.ads" 34 0 0# ());
  (#"submarine.ads" 37 0 0# ());
  (#"submarine.ads" 38 0 0# ());
  (#"submarine.ads" 39 0 0# ());
  (#"submarine.ads" 43 0 0# ());
  (#"submarine.ads" 49 0 0# ());
  (#"submarine.ads" 49 0 0# ());
  (#"submarine.ads" 49 0 0# ());
  (#"submarine.ads" 49 0 0# ( (let submarine__doorinner__assume = { Submarine__door.__split_fields = { Submarine__door.rec__submarine__door__open_close = (Submarine__openclose__rep.of_rep(1)); Submarine__door.rec__submarine__door__locked_unlocked = (Submarine__lock__rep.of_rep(0)) } } in (
   #"submarine.ads" 49 0 0# Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(submarine__doorinner__assume)) )))
  ;
  #"submarine.ads" 49 0 0# assume { #"submarine.ads" 49 0 0# (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content } True False True True) } ));
  (#"submarine.ads" 50 0 0# ( (let submarine__doorouter__assume = { Submarine__door.__split_fields = { Submarine__door.rec__submarine__door__open_close = (Submarine__openclose__rep.of_rep(1)); Submarine__door.rec__submarine__door__locked_unlocked = (Submarine__lock__rep.of_rep(0)) } } in (
   #"submarine.ads" 50 0 0# Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(submarine__doorouter__assume)) )))
  ;
  #"submarine.ads" 50 0 0# assume { #"submarine.ads" 50 0 0# (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content } True False True True) } ));
  (#"submarine.ads" 53 0 0# ());
  (#"submarine.ads" 58 0 0# ());
  (#"submarine.ads" 58 0 0# ());
  (#"submarine.ads" 58 0 0# ( (let submarine__o2warning__assume = { Submarine__warning.__split_fields = { Submarine__warning.rec__submarine__warning__on_off = (Submarine__onoff__rep.of_rep(1)) } } in (
   #"submarine.ads" 58 0 0# Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content <- ( (Submarine__warning.__split_fields(submarine__o2warning__assume)) )))
  ;
  #"submarine.ads" 58 0 0# assume { #"submarine.ads" 58 0 0# (Submarine__warning___axiom.dynamic_invariant { Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content } True False True True) } ));
  (#"submarine.ads" 59 0 0# ( (let submarine__tempwarning__assume = { Submarine__warning.__split_fields = { Submarine__warning.rec__submarine__warning__on_off = (Submarine__onoff__rep.of_rep(1)) } } in (
   #"submarine.ads" 59 0 0# Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content <- ( (Submarine__warning.__split_fields(submarine__tempwarning__assume)) )))
  ;
  #"submarine.ads" 59 0 0# assume { #"submarine.ads" 59 0 0# (Submarine__warning___axiom.dynamic_invariant { Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content } True False True True) } ));
  (#"submarine.ads" 63 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 64 0 0# ());
  (#"submarine.ads" 71 0 0# ());
  (#"submarine.ads" 71 0 0# ());
  (#"submarine.ads" 70 0 0# ());
  (#"submarine.ads" 77 0 0# ());
  (#"submarine.ads" 80 0 0# ());
  (#"submarine.ads" 79 0 0# ());
  (#"submarine.ads" 78 0 0# ());
  (#"submarine.ads" 84 0 0# ());
  (#"submarine.ads" 87 0 0# ());
  (#"submarine.ads" 86 0 0# ());
  (#"submarine.ads" 85 0 0# ());
  (#"submarine.ads" 91 0 0# ());
  (#"submarine.ads" 94 0 0# ());
  (#"submarine.ads" 93 0 0# ());
  (#"submarine.ads" 92 0 0# ());
  (#"submarine.ads" 98 0 0# ());
  (#"submarine.ads" 101 0 0# ());
  (#"submarine.ads" 100 0 0# ());
  (#"submarine.ads" 99 0 0# ());
  (#"submarine.ads" 111 0 0# ());
  (#"submarine.ads" 114 0 0# ());
  (#"submarine.ads" 113 0 0# ());
  (#"submarine.ads" 112 0 0# ());
  (#"submarine.ads" 116 0 0# ());
  (#"submarine.ads" 117 0 0# ());
  (#"submarine.ads" 120 0 0# ());
  (#"submarine.ads" 123 0 0# ());
  (#"submarine.ads" 122 0 0# ());
  (#"submarine.ads" 121 0 0# ());
  (#"submarine.ads" 125 0 0# ());
  (#"submarine.ads" 126 0 0# ());
  (#"submarine.ads" 135 0 0# ());
  (#"submarine.ads" 138 0 0# ());
  (#"submarine.ads" 137 0 0# ());
  (#"submarine.ads" 136 0 0# ());
  (#"submarine.ads" 141 0 0# ());
  (#"submarine.ads" 144 0 0# ());
  (#"submarine.ads" 143 0 0# ());
  (#"submarine.ads" 142 0 0# ());
  (#"submarine.ads" 151 0 0# ());
  (#"submarine.ads" 154 0 0# ());
  (#"submarine.ads" 152 0 0# ());
  (#"submarine.ads" 156 0 0# ());
  (#"submarine.ads" 158 0 0# ());
  (#"submarine.ads" 157 0 0# ());
  (#"submarine.ads" 164 0 0# ());
  (#"submarine.ads" 166 0 0# ());
  (#"submarine.ads" 165 0 0# ());
  (#"submarine.ads" 169 0 0# ());
  (#"submarine.ads" 171 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 170 0 0# ());
  (#"submarine.ads" 70 0 0# ());
  (#"submarine.adb" 2 0 0# ());
  (#"submarine.adb" 6 0 0# ());
  (#"submarine.adb" 80 0 0# ());
  (#"submarine.adb" 102 0 0# ());
  (#"submarine.adb" 111 0 0# ());
  (#"submarine.adb" 134 0 0# ());
  (#"submarine.adb" 145 0 0# ());
  (#"submarine.adb" 162 0 0# ());
  (#"submarine.adb" 178 0 0# ());
  (#"submarine.adb" 184 0 0# ());
  (#"submarine.adb" 194 0 0# ());
  (#"submarine.adb" 206 0 0# ());
  (#"submarine.adb" 221 0 0# ());
  (#"submarine.adb" 249 0 0# ());
  (#"submarine.adb" 263 0 0# ());
  (#"submarine.adb" 273 0 0# ());
  ( "GP_Sloc:submarine.adb:289:1" (#"submarine.adb" 289 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "invairanta" defined at submarine.ads:70, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__invairanta__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__torpeadobay
 use        Submarine__torpeadobay__rep
 use        Submarine__as_index
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__ammostore___axiom
 use        Submarine__invairanta__a
 use        Submarine__torpeadobay___axiom
 use        Submarine__as_index___axiom
 use        Submarine__ammostore___axiom
 use        Submarine__invairanta__a___axiom

 val submarine__invairanta__result "model_projected" "model_trace:3314@result" "name:invairantA"  : bool__ref 
 
 let def #"submarine.ads" 70 0 0#"W:diverges:N" "GP_Subp:submarine.ads:70" 
   (__void_param : unit)
  requires { #"submarine.ads" 70 0 0# true }
  ensures { #"submarine.ads" 70 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:70 *)
  ;
  #"submarine.ads" 70 0 0# assume { #"submarine.ads" 70 0 0# (Submarine__ammostore___axiom.dynamic_invariant Submarine__invairanta__a.a True False True True) };
  #"submarine.ads" 70 0 0# assume { #"submarine.ads" 70 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:70 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:70 *)
  ;
  #"submarine.ads" 70 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:70 *)
  ;
  #"submarine.ads" 70 0 0# assume { #"submarine.ads" 70 0 0# true };
  #"submarine.ads" 70 0 0# try
   ( ( "GP_Sloc:submarine.ads:71:7" (#"submarine.ads" 71 0 0# ( #"submarine.ads" 71 0 0# submarine__invairanta__result.bool__content <- ( ( (let i = #"submarine.ads" 71 0 0# (any int
   ) in (
    (if ((Boolean.andb((0 <= i)) ((i <= 25)))) then (
     #"submarine.ads" 71 0 0# abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((i < 25)) (((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__invairanta__a.a) (i)))) <> (Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__invairanta__a.a) ((let temp___271 = (i - 1) in (
      ( #"submarine.ads" 71 0 0# assert { #"submarine.ads" 71 0 0# (#"submarine.ads" 72 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:submarine.ads:72:23" "GP_Reason:VC_INDEX_CHECK" "GP_Id:0" "comment:      and A(i) /= A(i - 1) and (for all j in i..A'Last => A(j) = A(i)));
                      ^ submarine.ads:72:23:VC_INDEX_CHECK" "GP_Shape:return__forsome__and__and__cmp__ixdcomp__sub" ( (Submarine__as_index.first <= temp___271) /\ (temp___271 <= Submarine__as_index.last) ) )) };
      temp___271 )))
     )))))))) (( (let j =  (any int
     ) in (
      (if ((Boolean.andb((i <= j)) ((j <= 25)))) then (
        abstract ensures {true}(let _ = ((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__invairanta__a.a) ((  assert {  (#"submarine.ads" 72 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:submarine.ads:72:61" "GP_Id:1" "comment:      and A(i) /= A(i - 1) and (for all j in i..A'Last => A(j) = A(i)));
                                                            ^ submarine.ads:72:61:VC_INDEX_CHECK" "GP_Shape:return__forsome__and__forall__cmp__ixdcomp" ( (Submarine__as_index.first <= j) /\ (j <= Submarine__as_index.last) ) )) };
       j ))))) = (Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__invairanta__a.a) (i))))) in (
        ()))
        end ))))
     ;
      (any bool
     requires { true} 
     ensures { ( (result = True) <-> (forall j   "model" "name:j" "model_trace:3361"  : int.
      ( ( (i <= j) /\ (j <= 25) ) -> ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__invairanta__a.a j)) = (Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__invairanta__a.a i))) )) )} 
     ) ))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (exists i  : int.
    ( ( (0 <= i) /\ (i <= 25) ) /\ ( ( (i < 25) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__invairanta__a.a i)) <> (Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__invairanta__a.a (i - 1)))) ) /\ (forall j   "model" "name:j" "model_trace:3361"  : int.
     ( ( (i <= j) /\ (j <= 25) ) -> ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__invairanta__a.a j)) = (Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__invairanta__a.a i))) )) ) )) )} 
   ) ) );
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  submarine__invairanta__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "popammo" defined at submarine.ads:63, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__popammo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__invairanta
 use        Submarine__invairanta___axiom
 use        Submarine__torpeadobay
 use        Submarine__torpeadobay__rep
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__ammostore___axiom
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__popammo__a
 use        Submarine__torpeadobay___axiom
 use        Submarine__ammostore___axiom
 use        Submarine__popammo__a___axiom
 use        Submarine__invairanta___axiom

 let def #"submarine.ads" 63 0 0#"W:diverges:N" "GP_Subp:submarine.ads:63" 
   (__void_param : unit)
  requires { #"submarine.ads" 63 0 0# true }
  ensures { #"submarine.ads" 63 0 0# (#"submarine.ads" 65 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:submarine.ads:65:14" "GP_Reason:VC_POSTCONDITION" "GP_Id:2" "comment:     Post => invairantA(A);
             ^ submarine.ads:65:14:VC_POSTCONDITION" "GP_Shape:pragargs__call_invairanta" ( "GP_Pretty_Ada:4140" "GP_Sloc:submarine.ads:65:14" ((epsilon temp___result_276 : bool.
   ( (temp___result_276 = (Submarine__invairanta.invairanta Submarine__popammo__a.a.Array__Int__Submarine__torpeadobay.map__content)) /\ (Submarine__invairanta.invairanta__function_guard temp___result_276 Submarine__popammo__a.a.Array__Int__Submarine__torpeadobay.map__content) )) = True) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:63 *)
  ;
   assume {  (Submarine__ammostore___axiom.dynamic_invariant Submarine__popammo__a.a.Array__Int__Submarine__torpeadobay.map__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:63 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:63 *)
  ;
   abstract ensures {true}(let _ = (Submarine__invairanta___axiom.invairanta(Submarine__popammo__a.a.Array__Int__Submarine__torpeadobay.map__content)) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:63 *)
  ;
   assume {  ((epsilon temp___result_275 : bool.
   ( (temp___result_275 = (Submarine__invairanta.invairanta Submarine__popammo__a.a.Array__Int__Submarine__torpeadobay.map__content)) /\ (Submarine__invairanta.invairanta__function_guard temp___result_275 Submarine__popammo__a.a.Array__Int__Submarine__torpeadobay.map__content) )) = True) };
   try
   ( ( "GP_Sloc:submarine.adb:10:10" (#"submarine.adb" 10 0 0# (if (((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__popammo__a.a.Array__Int__Submarine__torpeadobay.map__content) (25)))) = 0)) then (
    ( "GP_Sloc:submarine.adb:12:20" (#"submarine.adb" 12 0 0# #"submarine.adb" 12 0 0# Submarine__popammo__a.a.Array__Int__Submarine__torpeadobay.map__content <- ( (Array__Int__Submarine__torpeadobay.set(Submarine__popammo__a.a.Array__Int__Submarine__torpeadobay.map__content) (25) ((Submarine__torpeadobay__rep.of_rep(1)))) )) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Submarine__invairanta___axiom.invairanta(Submarine__popammo__a.a.Array__Int__Submarine__torpeadobay.map__content)) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "openinnerdoor" defined at submarine.ads:77, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__openinnerdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__closeouterdoor___axiom
 use        Submarine__openclose
 use        Submarine__openclose__rep
 use        Submarine__lock
 use        Submarine__lock__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__doorinner
 use        Submarine__doorouter
 use        Submarine__openclose___axiom
 use        Submarine__lock___axiom
 use        Submarine__door___axiom
 use        Submarine__doorinner___axiom
 use        Submarine__doorouter___axiom
 use        Submarine__closeouterdoor___axiom

 let def #"submarine.ads" 77 0 0#"W:diverges:N" "GP_Subp:submarine.ads:77" 
   (__void_param : unit)
  requires { #"submarine.ads" 77 0 0# true }
  ensures { #"submarine.ads" 77 0 0# (#"submarine.ads" 80 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:submarine.ads:80:14" "GP_Id:4" "comment:     Post => DoorInner.open_close = open and DoorOuter.open_close = closed
             ^ submarine.ads:80:14:VC_POSTCONDITION" "GP_Shape:pragargs__and" ( ( ( "GP_Pretty_Ada:3413" "GP_Sloc:submarine.ads:80:14" ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 0) ) /\ ( "GP_Pretty_Ada:3419" "GP_Sloc:submarine.ads:80:46" ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 1) ) ) /\ ( "GP_Pretty_Ada:3425" "GP_Sloc:submarine.ads:81:10" ((Submarine__lock__rep.to_rep (Submarine__door.rec__submarine__door__locked_unlocked (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 1) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:77 *)
  ;
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:77 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:77 *)
  ;
   abstract ensures {true}(let _ = ((Submarine__openclose__rep.to_rep((Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content })))))) = 1) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:77 *)
  ;
   assume {  ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 1) };
   try
   ( ( "GP_Sloc:submarine.adb:83:10" (#"submarine.adb" 83 0 0# ()) );
   ( "GP_Sloc:submarine.adb:83:7" (#"submarine.adb" 83 0 0# (if (((Submarine__openclose__rep.to_rep((Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content })))))) = 0)) then (
    ( ( "GP_Sloc:submarine.adb:85:10" (#"submarine.adb" 85 0 0# ()) );
    ( "GP_Sloc:submarine.adb:85:10" (#"submarine.adb" 85 0 0# ( (#"submarine.adb" 85 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:submarine.adb:85:10" "GP_Reason:VC_PRECONDITION" "GP_Id:3" "comment:         closeOuterDoor;
         ^ submarine.adb:85:10:VC_PRECONDITION" "GP_Shape:if__call_closeouterdoor" (Submarine__closeouterdoor___axiom.closeouterdoor(())) )) )) ) )) else (
    ()))) );
   ( "GP_Sloc:submarine.adb:89:10" (#"submarine.adb" 89 0 0# ()) );
   ( "GP_Sloc:submarine.adb:89:7" (#"submarine.adb" 89 0 0# (if (((Submarine__lock__rep.to_rep((Submarine__door.rec__submarine__door__locked_unlocked((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content })))))) = 0)) then (
    ( ( "GP_Sloc:submarine.adb:91:10" (#"submarine.adb" 91 0 0# ()) );
    ( "GP_Sloc:submarine.adb:91:36" (#"submarine.adb" 91 0 0# (let temp___278 = (let temp___277 = { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content } in (
     ( #"submarine.adb" 91 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__locked_unlocked((Submarine__door.__split_fields(temp___277)))) in (
      ()))
      end ;
     { ( temp___277 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___277)) ) with Submarine__door.rec__submarine__door__locked_unlocked = (Submarine__lock__rep.of_rep(1)) } } )))
     in (
     #"submarine.adb" 91 0 0# Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___278)) )))
    ) ) )) else (
    ()))) );
   ( "GP_Sloc:submarine.adb:95:7" (#"submarine.adb" 95 0 0# ()) );
   ( "GP_Sloc:submarine.adb:95:28" (#"submarine.adb" 95 0 0# (let temp___280 = (let temp___279 = { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 95 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields(temp___279)))) in (
     ()))
     end ;
    { ( temp___279 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___279)) ) with Submarine__door.rec__submarine__door__open_close = (Submarine__openclose__rep.of_rep(0)) } } )))
    in (
    #"submarine.adb" 95 0 0# Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___280)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb(((Submarine__openclose__rep.to_rep((Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content })))))) = 0)) (((Submarine__openclose__rep.to_rep((Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content })))))) = 1)))) (((Submarine__lock__rep.to_rep((Submarine__door.rec__submarine__door__locked_unlocked((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content })))))) = 1))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "closeinnerdoor" defined at submarine.ads:84, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__closeinnerdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__openclose
 use        Submarine__openclose__rep
 use        Submarine__lock
 use        Submarine__lock__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__doorinner
 use        Submarine__openclose___axiom
 use        Submarine__lock___axiom
 use        Submarine__door___axiom
 use        Submarine__doorinner___axiom

 let def #"submarine.ads" 84 0 0#"W:diverges:N" "GP_Subp:submarine.ads:84" 
   (__void_param : unit)
  requires { #"submarine.ads" 84 0 0# true }
  ensures { #"submarine.ads" 84 0 0# (#"submarine.ads" 87 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine.ads:87:14" "GP_Id:5" "comment:     Post => DoorInner.open_close = closed
             ^ submarine.ads:87:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:3456" "GP_Sloc:submarine.ads:87:14" ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 1) ) /\ ( "GP_Pretty_Ada:3462" "GP_Sloc:submarine.ads:88:11" ((Submarine__lock__rep.to_rep (Submarine__door.rec__submarine__door__locked_unlocked (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 0) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:84 *)
  ;
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:84 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:84 *)
  ;
   abstract ensures {true}(let _ = ((Submarine__openclose__rep.to_rep((Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content })))))) = 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:84 *)
  ;
   assume {  ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 0) };
   try
   ( ( "GP_Sloc:submarine.adb:105:7" (#"submarine.adb" 105 0 0# ()) );
   ( "GP_Sloc:submarine.adb:105:28" (#"submarine.adb" 105 0 0# (let temp___282 = (let temp___281 = { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 105 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields(temp___281)))) in (
     ()))
     end ;
    { ( temp___281 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___281)) ) with Submarine__door.rec__submarine__door__open_close = (Submarine__openclose__rep.of_rep(1)) } } )))
    in (
    #"submarine.adb" 105 0 0# Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___282)) )))
   ) );
   ( "GP_Sloc:submarine.adb:106:7" (#"submarine.adb" 106 0 0# ()) );
   ( "GP_Sloc:submarine.adb:106:33" (#"submarine.adb" 106 0 0# (let temp___284 = (let temp___283 = { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 106 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__locked_unlocked((Submarine__door.__split_fields(temp___283)))) in (
     ()))
     end ;
    { ( temp___283 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___283)) ) with Submarine__door.rec__submarine__door__locked_unlocked = (Submarine__lock__rep.of_rep(0)) } } )))
    in (
    #"submarine.adb" 106 0 0# Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___284)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb(((Submarine__openclose__rep.to_rep((Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content })))))) = 1)) (((Submarine__lock__rep.to_rep((Submarine__door.rec__submarine__door__locked_unlocked((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content })))))) = 0))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "openouterdoor" defined at submarine.ads:91, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__openouterdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__closeinnerdoor___axiom
 use        Submarine__openclose
 use        Submarine__openclose__rep
 use        Submarine__lock
 use        Submarine__lock__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__doorinner
 use        Submarine__doorouter
 use        Submarine__openclose___axiom
 use        Submarine__lock___axiom
 use        Submarine__door___axiom
 use        Submarine__doorinner___axiom
 use        Submarine__doorouter___axiom
 use        Submarine__closeinnerdoor___axiom

 let def #"submarine.ads" 91 0 0#"W:diverges:N" "GP_Subp:submarine.ads:91" 
   (__void_param : unit)
  requires { #"submarine.ads" 91 0 0# true }
  ensures { #"submarine.ads" 91 0 0# (#"submarine.ads" 94 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine.ads:94:14" "GP_Id:7" "comment:     Post => DoorOuter.open_close = open and DoorInner.open_close = closed
             ^ submarine.ads:94:14:VC_POSTCONDITION" ( ( ( "GP_Pretty_Ada:3495" "GP_Sloc:submarine.ads:94:14" ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 0) ) /\ ( "GP_Pretty_Ada:3501" "GP_Sloc:submarine.ads:94:46" ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content }))) = 1) ) ) /\ ( "GP_Pretty_Ada:3507" "GP_Sloc:submarine.ads:95:10" ((Submarine__lock__rep.to_rep (Submarine__door.rec__submarine__door__locked_unlocked (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 1) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:91 *)
  ;
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:91 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:91 *)
  ;
   abstract ensures {true}(let _ = ((Submarine__openclose__rep.to_rep((Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content })))))) = 1) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:91 *)
  ;
   assume {  ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 1) };
   try
   ( ( "GP_Sloc:submarine.adb:114:10" (#"submarine.adb" 114 0 0# ()) );
   ( "GP_Sloc:submarine.adb:114:7" (#"submarine.adb" 114 0 0# (if (((Submarine__openclose__rep.to_rep((Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content })))))) = 0)) then (
    ( ( "GP_Sloc:submarine.adb:116:10" (#"submarine.adb" 116 0 0# ()) );
    ( "GP_Sloc:submarine.adb:116:10" (#"submarine.adb" 116 0 0# ( (#"submarine.adb" 116 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:submarine.adb:116:10" "GP_Id:6" "comment:         closeInnerDoor;
         ^ submarine.adb:116:10:VC_PRECONDITION" "GP_Shape:if__call_closeinnerdoor" (Submarine__closeinnerdoor___axiom.closeinnerdoor(())) )) )) ) )) else (
    ()))) );
   ( "GP_Sloc:submarine.adb:120:10" (#"submarine.adb" 120 0 0# ()) );
   ( "GP_Sloc:submarine.adb:120:7" (#"submarine.adb" 120 0 0# (if (((Submarine__lock__rep.to_rep((Submarine__door.rec__submarine__door__locked_unlocked((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content })))))) = 0)) then (
    ( ( "GP_Sloc:submarine.adb:122:10" (#"submarine.adb" 122 0 0# ()) );
    ( "GP_Sloc:submarine.adb:122:36" (#"submarine.adb" 122 0 0# (let temp___286 = (let temp___285 = { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content } in (
     ( #"submarine.adb" 122 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__locked_unlocked((Submarine__door.__split_fields(temp___285)))) in (
      ()))
      end ;
     { ( temp___285 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___285)) ) with Submarine__door.rec__submarine__door__locked_unlocked = (Submarine__lock__rep.of_rep(1)) } } )))
     in (
     #"submarine.adb" 122 0 0# Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___286)) )))
    ) ) )) else (
    ()))) );
   ( "GP_Sloc:submarine.adb:127:7" (#"submarine.adb" 127 0 0# ()) );
   ( "GP_Sloc:submarine.adb:127:28" (#"submarine.adb" 127 0 0# (let temp___288 = (let temp___287 = { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 127 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields(temp___287)))) in (
     ()))
     end ;
    { ( temp___287 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___287)) ) with Submarine__door.rec__submarine__door__open_close = (Submarine__openclose__rep.of_rep(0)) } } )))
    in (
    #"submarine.adb" 127 0 0# Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___288)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb(((Submarine__openclose__rep.to_rep((Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content })))))) = 0)) (((Submarine__openclose__rep.to_rep((Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorinner.doorinner__split_fields.Submarine__door.__split_fields__content })))))) = 1)))) (((Submarine__lock__rep.to_rep((Submarine__door.rec__submarine__door__locked_unlocked((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content })))))) = 1))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "closeouterdoor" defined at submarine.ads:98, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__closeouterdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__openclose
 use        Submarine__openclose__rep
 use        Submarine__lock
 use        Submarine__lock__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__doorouter
 use        Submarine__openclose___axiom
 use        Submarine__lock___axiom
 use        Submarine__door___axiom
 use        Submarine__doorouter___axiom

 let def #"submarine.ads" 98 0 0#"W:diverges:N" "GP_Subp:submarine.ads:98" 
   (__void_param : unit)
  requires { #"submarine.ads" 98 0 0# true }
  ensures { #"submarine.ads" 98 0 0# (#"submarine.ads" 101 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine.ads:101:14" "GP_Id:8" "comment:     Post => DoorOuter.open_close = closed
             ^ submarine.ads:101:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:3538" "GP_Sloc:submarine.ads:101:14" ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 1) ) /\ ( "GP_Pretty_Ada:3544" "GP_Sloc:submarine.ads:102:10" ((Submarine__lock__rep.to_rep (Submarine__door.rec__submarine__door__locked_unlocked (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 0) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:98 *)
  ;
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:98 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:98 *)
  ;
   abstract ensures {true}(let _ = ((Submarine__openclose__rep.to_rep((Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content })))))) = 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:98 *)
  ;
   assume {  ((Submarine__openclose__rep.to_rep (Submarine__door.rec__submarine__door__open_close (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content }))) = 0) };
   try
   ( ( "GP_Sloc:submarine.adb:137:7" (#"submarine.adb" 137 0 0# ()) );
   ( "GP_Sloc:submarine.adb:137:28" (#"submarine.adb" 137 0 0# (let temp___290 = (let temp___289 = { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 137 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields(temp___289)))) in (
     ()))
     end ;
    { ( temp___289 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___289)) ) with Submarine__door.rec__submarine__door__open_close = (Submarine__openclose__rep.of_rep(1)) } } )))
    in (
    #"submarine.adb" 137 0 0# Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___290)) )))
   ) );
   ( "GP_Sloc:submarine.adb:138:7" (#"submarine.adb" 138 0 0# ()) );
   ( "GP_Sloc:submarine.adb:138:33" (#"submarine.adb" 138 0 0# (let temp___292 = (let temp___291 = { Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 138 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__locked_unlocked((Submarine__door.__split_fields(temp___291)))) in (
     ()))
     end ;
    { ( temp___291 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___291)) ) with Submarine__door.rec__submarine__door__locked_unlocked = (Submarine__lock__rep.of_rep(0)) } } )))
    in (
    #"submarine.adb" 138 0 0# Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___292)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb(((Submarine__openclose__rep.to_rep((Submarine__door.rec__submarine__door__open_close((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content })))))) = 1)) (((Submarine__lock__rep.to_rep((Submarine__door.rec__submarine__door__locked_unlocked((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__doorouter.doorouter__split_fields.Submarine__door.__split_fields__content })))))) = 0))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "initiateo2warning" defined at submarine.ads:111, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__initiateo2warning__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__onoff
 use        Submarine__onoff__rep
 use        Submarine__warning
 use        Submarine__warning___axiom
 use        Submarine__o2warning
 use        Submarine__onoff___axiom
 use        Submarine__warning___axiom
 use        Submarine__o2warning___axiom

 let def #"submarine.ads" 111 0 0#"W:diverges:N" "GP_Subp:submarine.ads:111" 
   (__void_param : unit)
  requires { #"submarine.ads" 111 0 0# true }
  ensures { #"submarine.ads" 111 0 0# (#"submarine.ads" 114 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:submarine.ads:114:14" "GP_Id:9" "comment:     Post => O2Warning.on_Off = On;
             ^ submarine.ads:114:14:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:4530" "GP_Sloc:submarine.ads:114:14" ((Submarine__onoff__rep.to_rep (Submarine__warning.rec__submarine__warning__on_off (Submarine__warning.__split_fields { Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:111 *)
  ;
   assume {  (Submarine__warning___axiom.dynamic_invariant { Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:111 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:111 *)
  ;
   abstract ensures {true}(let _ = ((Submarine__onoff__rep.to_rep((Submarine__warning.rec__submarine__warning__on_off((Submarine__warning.__split_fields({ Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content })))))) = 1) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:111 *)
  ;
   assume {  ((Submarine__onoff__rep.to_rep (Submarine__warning.rec__submarine__warning__on_off (Submarine__warning.__split_fields { Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content }))) = 1) };
   try
   ( ( "GP_Sloc:submarine.adb:180:7" (#"submarine.adb" 180 0 0# ()) );
   ( "GP_Sloc:submarine.adb:180:24" (#"submarine.adb" 180 0 0# (let temp___294 = (let temp___293 = { Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content } in (
    ( #"submarine.adb" 180 0 0# abstract ensures {true}(let _ = (Submarine__warning.rec__submarine__warning__on_off((Submarine__warning.__split_fields(temp___293)))) in (
     ()))
     end ;
    { ( temp___293 ) with Submarine__warning.__split_fields = { ( (Submarine__warning.__split_fields(temp___293)) ) with Submarine__warning.rec__submarine__warning__on_off = (Submarine__onoff__rep.of_rep(0)) } } )))
    in (
    #"submarine.adb" 180 0 0# Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content <- ( (Submarine__warning.__split_fields(temp___294)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Submarine__onoff__rep.to_rep((Submarine__warning.rec__submarine__warning__on_off((Submarine__warning.__split_fields({ Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "checkoxygen" defined at submarine.ads:116, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__checkoxygen__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__initiateo2warning___axiom
 use        Submarine__surface___axiom
 use        Submarine__depth___axiom
 use        Submarine__currentdepth
 use        Submarine__oxygen___axiom
 use        Submarine__oxygenlevel
 use        Submarine__warninglevel
 use        Submarine__emptyoxygen
 use        Submarine__onoff
 use        Submarine__onoff__rep
 use        Submarine__warning
 use        Submarine__warning___axiom
 use        Submarine__o2warning
 use        Submarine__depth___axiom
 use        Submarine__currentdepth___axiom
 use        Submarine__oxygen___axiom
 use        Submarine__oxygenlevel___axiom
 use        Submarine__warninglevel___axiom
 use        Submarine__emptyoxygen___axiom
 use        Submarine__onoff___axiom
 use        Submarine__warning___axiom
 use        Submarine__o2warning___axiom
 use        Submarine__initiateo2warning___axiom
 use        Submarine__surface___axiom

 let def #"submarine.ads" 116 0 0#"W:diverges:N" "GP_Subp:submarine.ads:116" 
   (__void_param : unit)
  requires { #"submarine.ads" 116 0 0# true }
  ensures { #"submarine.ads" 116 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:116 *)
  ;
  #"submarine.ads" 116 0 0# assume { #"submarine.ads" 116 0 0# (Submarine__depth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True False True True) };
  #"submarine.ads" 116 0 0# assume { #"submarine.ads" 116 0 0# (Submarine__oxygen___axiom.dynamic_invariant Submarine__oxygenlevel.oxygenlevel.int__content True False True True) };
  #"submarine.ads" 116 0 0# assume { #"submarine.ads" 116 0 0# (Submarine__oxygen___axiom.dynamic_invariant Submarine__warninglevel.warninglevel.int__content True False True True) };
  #"submarine.ads" 116 0 0# assume { #"submarine.ads" 116 0 0# (Submarine__oxygen___axiom.dynamic_invariant Submarine__emptyoxygen.emptyoxygen.int__content True False True True) };
  #"submarine.ads" 116 0 0# assume { #"submarine.ads" 116 0 0# (Submarine__warning___axiom.dynamic_invariant { Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content } True False True True) };
  #"submarine.ads" 116 0 0# assume { #"submarine.ads" 116 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:116 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:116 *)
  ;
  #"submarine.ads" 116 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:116 *)
  ;
  #"submarine.ads" 116 0 0# assume { #"submarine.ads" 116 0 0# true };
  #"submarine.ads" 116 0 0# try
   ( ( "GP_Sloc:submarine.adb:147:11" (#"submarine.adb" 147 0 0# ()) );
   ( "GP_Sloc:submarine.adb:147:26" (#"submarine.adb" 147 0 0# ()) );
   ( "GP_Sloc:submarine.adb:147:43" (#"submarine.adb" 147 0 0# ()) );
   ( "GP_Sloc:submarine.adb:147:7" (#"submarine.adb" 147 0 0# (if ((Boolean.andb((Submarine__oxygenlevel.oxygenlevel.int__content <= Submarine__warninglevel.warninglevel.int__content)) (((Submarine__onoff__rep.to_rep((Submarine__warning.rec__submarine__warning__on_off((Submarine__warning.__split_fields({ Submarine__warning.__split_fields = Submarine__o2warning.o2warning__split_fields.Submarine__warning.__split_fields__content })))))) = 1)))) then (
    ( ( "GP_Sloc:submarine.adb:149:10" (#"submarine.adb" 149 0 0# ()) );
    ( "GP_Sloc:submarine.adb:149:10" (#"submarine.adb" 149 0 0# ( (#"submarine.adb" 149 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:submarine.adb:149:10" "GP_Id:10" "comment:         initiateO2Warning;
         ^ submarine.adb:149:10:VC_PRECONDITION" "GP_Shape:if__call_initiateo2warning" (Submarine__initiateo2warning___axiom.initiateo2warning(())) )) )) ) )) else (
    ()))) );
   ( "GP_Sloc:submarine.adb:153:10" (#"submarine.adb" 153 0 0# ()) );
   ( "GP_Sloc:submarine.adb:153:24" (#"submarine.adb" 153 0 0# ()) );
   ( "GP_Sloc:submarine.adb:153:7" (#"submarine.adb" 153 0 0# (if ((Submarine__oxygenlevel.oxygenlevel.int__content = Submarine__emptyoxygen.emptyoxygen.int__content)) then (
    ( ( "GP_Sloc:submarine.adb:155:10" (#"submarine.adb" 155 0 0# ()) );
    ( "GP_Sloc:submarine.adb:155:10" (#"submarine.adb" 155 0 0# ( (#"submarine.adb" 155 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:submarine.adb:155:10" "GP_Id:11" "comment:         Surface;
         ^ submarine.adb:155:10:VC_PRECONDITION" "GP_Shape:if__call_surface" (Submarine__surface___axiom.surface(())) )) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "initiatetempwarning" defined at submarine.ads:120, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__initiatetempwarning__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__onoff
 use        Submarine__onoff__rep
 use        Submarine__warning
 use        Submarine__warning___axiom
 use        Submarine__tempwarning
 use        Submarine__onoff___axiom
 use        Submarine__warning___axiom
 use        Submarine__tempwarning___axiom

 let def #"submarine.ads" 120 0 0#"W:diverges:N" "GP_Subp:submarine.ads:120" 
   (__void_param : unit)
  requires { #"submarine.ads" 120 0 0# true }
  ensures { #"submarine.ads" 120 0 0# (#"submarine.ads" 123 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:submarine.ads:123:14" "GP_Id:12" "comment:     Post => TempWarning.on_Off = On;
             ^ submarine.ads:123:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4596" "GP_Sloc:submarine.ads:123:14" ((Submarine__onoff__rep.to_rep (Submarine__warning.rec__submarine__warning__on_off (Submarine__warning.__split_fields { Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:120 *)
  ;
   assume {  (Submarine__warning___axiom.dynamic_invariant { Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:120 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:120 *)
  ;
   abstract ensures {true}(let _ = ((Submarine__onoff__rep.to_rep((Submarine__warning.rec__submarine__warning__on_off((Submarine__warning.__split_fields({ Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content })))))) = 1) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:120 *)
  ;
   assume {  ((Submarine__onoff__rep.to_rep (Submarine__warning.rec__submarine__warning__on_off (Submarine__warning.__split_fields { Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content }))) = 1) };
   try
   ( ( "GP_Sloc:submarine.adb:186:7" (#"submarine.adb" 186 0 0# ()) );
   ( "GP_Sloc:submarine.adb:186:26" (#"submarine.adb" 186 0 0# (let temp___296 = (let temp___295 = { Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content } in (
    ( #"submarine.adb" 186 0 0# abstract ensures {true}(let _ = (Submarine__warning.rec__submarine__warning__on_off((Submarine__warning.__split_fields(temp___295)))) in (
     ()))
     end ;
    { ( temp___295 ) with Submarine__warning.__split_fields = { ( (Submarine__warning.__split_fields(temp___295)) ) with Submarine__warning.rec__submarine__warning__on_off = (Submarine__onoff__rep.of_rep(0)) } } )))
    in (
    #"submarine.adb" 186 0 0# Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content <- ( (Submarine__warning.__split_fields(temp___296)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Submarine__onoff__rep.to_rep((Submarine__warning.rec__submarine__warning__on_off((Submarine__warning.__split_fields({ Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "checkrectortemp" defined at submarine.ads:125, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__checkrectortemp__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__initiatetempwarning___axiom
 use        Submarine__surface___axiom
 use        Submarine__depth___axiom
 use        Submarine__currentdepth
 use        Submarine__temperature___axiom
 use        Submarine__currenttemp
 use        Submarine__maxsafetemp
 use        Submarine__warningtemp
 use        Submarine__onoff
 use        Submarine__onoff__rep
 use        Submarine__warning
 use        Submarine__warning___axiom
 use        Submarine__tempwarning
 use        Submarine__depth___axiom
 use        Submarine__currentdepth___axiom
 use        Submarine__temperature___axiom
 use        Submarine__currenttemp___axiom
 use        Submarine__maxsafetemp___axiom
 use        Submarine__warningtemp___axiom
 use        Submarine__onoff___axiom
 use        Submarine__warning___axiom
 use        Submarine__tempwarning___axiom
 use        Submarine__initiatetempwarning___axiom
 use        Submarine__surface___axiom

 let def #"submarine.ads" 125 0 0#"W:diverges:N" "GP_Subp:submarine.ads:125" 
   (__void_param : unit)
  requires { #"submarine.ads" 125 0 0# true }
  ensures { #"submarine.ads" 125 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:125 *)
  ;
  #"submarine.ads" 125 0 0# assume { #"submarine.ads" 125 0 0# (Submarine__depth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True False True True) };
  #"submarine.ads" 125 0 0# assume { #"submarine.ads" 125 0 0# (Submarine__temperature___axiom.dynamic_invariant Submarine__currenttemp.currenttemp.int__content True False True True) };
  #"submarine.ads" 125 0 0# assume { #"submarine.ads" 125 0 0# (Submarine__temperature___axiom.dynamic_invariant Submarine__maxsafetemp.maxsafetemp.int__content True False True True) };
  #"submarine.ads" 125 0 0# assume { #"submarine.ads" 125 0 0# (Submarine__temperature___axiom.dynamic_invariant Submarine__warningtemp.warningtemp.int__content True False True True) };
  #"submarine.ads" 125 0 0# assume { #"submarine.ads" 125 0 0# (Submarine__warning___axiom.dynamic_invariant { Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content } True False True True) };
  #"submarine.ads" 125 0 0# assume { #"submarine.ads" 125 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:125 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:125 *)
  ;
  #"submarine.ads" 125 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:125 *)
  ;
  #"submarine.ads" 125 0 0# assume { #"submarine.ads" 125 0 0# true };
  #"submarine.ads" 125 0 0# try
   ( ( "GP_Sloc:submarine.adb:164:11" (#"submarine.adb" 164 0 0# ()) );
   ( "GP_Sloc:submarine.adb:164:26" (#"submarine.adb" 164 0 0# ()) );
   ( "GP_Sloc:submarine.adb:164:42" (#"submarine.adb" 164 0 0# ()) );
   ( "GP_Sloc:submarine.adb:164:7" (#"submarine.adb" 164 0 0# (if ((Boolean.andb((Submarine__currenttemp.currenttemp.int__content >= Submarine__warningtemp.warningtemp.int__content)) (((Submarine__onoff__rep.to_rep((Submarine__warning.rec__submarine__warning__on_off((Submarine__warning.__split_fields({ Submarine__warning.__split_fields = Submarine__tempwarning.tempwarning__split_fields.Submarine__warning.__split_fields__content })))))) = 1)))) then (
    ( ( "GP_Sloc:submarine.adb:166:10" (#"submarine.adb" 166 0 0# ()) );
    ( "GP_Sloc:submarine.adb:166:10" (#"submarine.adb" 166 0 0# ( (#"submarine.adb" 166 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:submarine.adb:166:10" "GP_Id:13" "comment:         initiateTempWarning;
         ^ submarine.adb:166:10:VC_PRECONDITION" "GP_Shape:if__call_initiatetempwarning" (Submarine__initiatetempwarning___axiom.initiatetempwarning(())) )) )) ) )) else (
    ()))) );
   ( "GP_Sloc:submarine.adb:170:10" (#"submarine.adb" 170 0 0# ()) );
   ( "GP_Sloc:submarine.adb:170:25" (#"submarine.adb" 170 0 0# ()) );
   ( "GP_Sloc:submarine.adb:170:7" (#"submarine.adb" 170 0 0# (if ((Submarine__currenttemp.currenttemp.int__content >= Submarine__maxsafetemp.maxsafetemp.int__content)) then (
    ( ( "GP_Sloc:submarine.adb:172:10" (#"submarine.adb" 172 0 0# ()) );
    ( "GP_Sloc:submarine.adb:172:10" (#"submarine.adb" 172 0 0# ( (#"submarine.adb" 172 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:if__call_surface" "GP_Sloc:submarine.adb:172:10" "GP_Id:14" "comment:         Surface;
         ^ submarine.adb:172:10:VC_PRECONDITION" (Submarine__surface___axiom.surface(())) )) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "surface" defined at submarine.ads:135, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__surface__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__depth
 use        Submarine__depth___axiom
 use        Submarine__currentdepth
 use        Submarine__surface__L_1
 use        Submarine__surface__L_1___axiom
 use        Submarine__depth___axiom
 use        Submarine__currentdepth___axiom

 let def #"submarine.ads" 135 0 0#"W:diverges:N" "GP_Subp:submarine.ads:135" 
   (__void_param : unit)
  requires { #"submarine.ads" 135 0 0# true }
  ensures { #"submarine.ads" 135 0 0# (#"submarine.ads" 138 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:submarine.ads:138:14" "GP_Id:16" "comment:     Post => CurrentDepth <= Depth'First;
             ^ submarine.ads:138:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4660" "GP_Sloc:submarine.ads:138:14" (Submarine__currentdepth.currentdepth.int__content <= 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:135 *)
  ;
   assume {  (Submarine__depth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:135 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:135 *)
  ;
   abstract ensures {true}(let _ = (Submarine__currentdepth.currentdepth.int__content >= 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:135 *)
  ;
   assume {  (Submarine__currentdepth.currentdepth.int__content >= 0) };
   try
   ( (#"submarine.adb" 197 0 0# ());
   ( "GP_Sloc:submarine.adb:197:40" (#"submarine.adb" 197 0 0# ( () (* Translation of an Ada loop from submarine.adb:197 *)
   ;
   (if ((Submarine__currentdepth.currentdepth.int__content > 0)) then (
    #"submarine.adb" 197 0 0# try
     ( #"submarine.adb" 197 0 0# abstract ensures {true}(let _ = Submarine__currentdepth.currentdepth.int__content in (
      ()))
      end ;
     (let temp___297 = #"submarine.adb" 197 0 0# (any int
     ensures {#"submarine.adb" 197 0 0# (result = Submarine__currentdepth.currentdepth.int__content)} 
     ) in (
      ( () (* First unroling of the loop statements appearing before the loop invariant of loop submarine.adb:197 *)
      ;
      () (* While loop translating the Ada loop from submarine.adb:197 *)
      ;
      #"submarine.adb" 197 0 0# while True do
       ( () (* Assume implicit invariants from the loop submarine.adb:197 *)
       ;
       #"submarine.adb" 197 0 0# assume { #"submarine.adb" 197 0 0# (Boolean.andb(( ( true /\ (Submarine__depth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True True True True) ) /\ true )) ((Submarine__currentdepth.currentdepth.int__content > 0))) };
       () (* Check for absence of RTE in the invariant of loop submarine.adb:197 *)
       ;
       () (* Loop statements appearing after the loop invariant of loop submarine.adb:197 *)
       ;
       ( "GP_Sloc:submarine.adb:199:10" (#"submarine.adb" 199 0 0# ()) );
       ( "GP_Sloc:submarine.adb:199:26" (#"submarine.adb" 199 0 0# ()) );
       ( "GP_Sloc:submarine.adb:199:23" (#"submarine.adb" 199 0 0# #"submarine.adb" 199 0 0# Submarine__currentdepth.currentdepth.int__content <- ( (#"submarine.adb" 199 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:submarine.adb:199:39" "GP_Reason:VC_RANGE_CHECK" "GP_Id:15" "comment:         CurrentDepth := CurrentDepth - 1;
                                      ^ submarine.adb:199:39:VC_RANGE_CHECK" "GP_Shape:L_1_while__currentdepth_assign__sub" (Submarine__depth.range_check_((Submarine__currentdepth.currentdepth.int__content - 1))) )) )) );
       () (* Check for the exit condition and loop statements appearing before the loop invariant of loop submarine.adb:197 *)
       ;
       (if (not ( (Submarine__currentdepth.currentdepth.int__content > 0) )) then (
         raise Submarine__surface__L_1.L_1)) )
      done )))
      )
    with
     Submarine__surface__L_1.L_1 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Submarine__currentdepth.currentdepth.int__content <= 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "dive" defined at submarine.ads:141, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__dive__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__depth
 use        Submarine__depth___axiom
 use        Submarine__currentdepth
 use        Submarine__maxdepth
 use        Submarine__dive__L_2
 use        Submarine__dive__L_2___axiom
 use        Submarine__depth___axiom
 use        Submarine__currentdepth___axiom
 use        Submarine__maxdepth___axiom

 let def #"submarine.ads" 141 0 0#"W:diverges:N" "GP_Subp:submarine.ads:141" 
   (__void_param : unit)
  requires { #"submarine.ads" 141 0 0# true }
  ensures { #"submarine.ads" 141 0 0# (#"submarine.ads" 144 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:submarine.ads:144:14" "GP_Id:18" "comment:     Post => CurrentDepth <= maxDepth;
             ^ submarine.ads:144:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4707" "GP_Sloc:submarine.ads:144:14" (Submarine__currentdepth.currentdepth.int__content <= Submarine__maxdepth.maxdepth.int__content) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:141 *)
  ;
   assume {  (Submarine__depth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True False True True) };
   assume {  (Submarine__depth___axiom.dynamic_invariant Submarine__maxdepth.maxdepth.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:141 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:141 *)
  ;
   abstract ensures {true}(let _ = (Submarine__currentdepth.currentdepth.int__content <= Submarine__maxdepth.maxdepth.int__content) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:141 *)
  ;
   assume {  (Submarine__currentdepth.currentdepth.int__content <= Submarine__maxdepth.maxdepth.int__content) };
   try
   ( (#"submarine.adb" 209 0 0# ());
   ( "GP_Sloc:submarine.adb:209:37" (#"submarine.adb" 209 0 0# ( () (* Translation of an Ada loop from submarine.adb:209 *)
   ;
   (if ((Submarine__currentdepth.currentdepth.int__content < Submarine__maxdepth.maxdepth.int__content)) then (
    #"submarine.adb" 209 0 0# try
     ( #"submarine.adb" 209 0 0# abstract ensures {true}(let _ = Submarine__currentdepth.currentdepth.int__content in (
      ()))
      end ;
     (let temp___298 = #"submarine.adb" 209 0 0# (any int
     ensures {#"submarine.adb" 209 0 0# (result = Submarine__currentdepth.currentdepth.int__content)} 
     ) in (
      ( () (* First unroling of the loop statements appearing before the loop invariant of loop submarine.adb:209 *)
      ;
      () (* While loop translating the Ada loop from submarine.adb:209 *)
      ;
      #"submarine.adb" 209 0 0# while True do
       ( () (* Assume implicit invariants from the loop submarine.adb:209 *)
       ;
       #"submarine.adb" 209 0 0# assume { #"submarine.adb" 209 0 0# (Boolean.andb(( ( true /\ (Submarine__depth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True True True True) ) /\ true )) ((Submarine__currentdepth.currentdepth.int__content < Submarine__maxdepth.maxdepth.int__content))) };
       () (* Check for absence of RTE in the invariant of loop submarine.adb:209 *)
       ;
       () (* Loop statements appearing after the loop invariant of loop submarine.adb:209 *)
       ;
       ( "GP_Sloc:submarine.adb:211:10" (#"submarine.adb" 211 0 0# ()) );
       ( "GP_Sloc:submarine.adb:211:26" (#"submarine.adb" 211 0 0# ()) );
       ( "GP_Sloc:submarine.adb:211:23" (#"submarine.adb" 211 0 0# #"submarine.adb" 211 0 0# Submarine__currentdepth.currentdepth.int__content <- ( (#"submarine.adb" 211 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:submarine.adb:211:39" "GP_Id:17" "comment:         CurrentDepth := CurrentDepth + 1;
                                      ^ submarine.adb:211:39:VC_RANGE_CHECK" "GP_Shape:L_2_while__currentdepth_assign__add" (Submarine__depth.range_check_((Submarine__currentdepth.currentdepth.int__content + 1))) )) )) );
       () (* Check for the exit condition and loop statements appearing before the loop invariant of loop submarine.adb:209 *)
       ;
       (if (not ( (Submarine__currentdepth.currentdepth.int__content < Submarine__maxdepth.maxdepth.int__content) )) then (
         raise Submarine__dive__L_2.L_2)) )
      done )))
      )
    with
     Submarine__dive__L_2.L_2 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Submarine__currentdepth.currentdepth.int__content <= Submarine__maxdepth.maxdepth.int__content) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "loadalltorpeado" defined at submarine.ads:151, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__loadalltorpeado__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__torpeadobay
 use        Submarine__torpeadobay__rep
 use        Submarine__as_index
 use        Submarine__as_index___axiom
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__ammostore___axiom
 use        Submarine__chambered_index
 use        Submarine__chambered_index___axiom
 use        Submarine__chambers___axiom
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__loadalltorpeado__a
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__loadalltorpeado__c
 use        Submarine__loadalltorpeado__i
 use        Submarine__loadalltorpeado__j
 use        Submarine__loadalltorpeado__firsttorpeadoindex
 use        Submarine__loadalltorpeado__L_3
 use        Submarine__loadalltorpeado__L_4
 use        Submarine__loadalltorpeado__i___axiom
 use        Submarine__loadalltorpeado__j___axiom
 use        Submarine__loadalltorpeado__firsttorpeadoindex___axiom
 use        Submarine__loadalltorpeado__L_3___axiom
 use        Submarine__loadalltorpeado__L_4___axiom
 use        Submarine__torpeadobay___axiom
 use        Submarine__as_index___axiom
 use        Submarine__ammostore___axiom
 use        Submarine__chambered_index___axiom
 use        Submarine__chambers___axiom
 use        Submarine__loadalltorpeado__a___axiom
 use        Submarine__loadalltorpeado__c___axiom

 let def #"submarine.ads" 151 0 0#"W:diverges:N" "GP_Subp:submarine.ads:151" 
   (__void_param : unit)
  requires { #"submarine.ads" 151 0 0# true }
  ensures { #"submarine.ads" 151 0 0# (#"submarine.ads" 154 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:submarine.ads:154:14" "GP_Id:19" "comment:     Post => (for some i in C'Range => C(i) = Loaded);
             ^ submarine.ads:154:14:VC_POSTCONDITION" "GP_Shape:pragargs__forsome" (exists i  : int.
   ( ( (0 <= i) /\ (i <= 4) ) /\ ( "GP_Pretty_Ada:3800" "GP_Sloc:submarine.ads:154:40" ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content i)) = 0) ) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:151 *)
  ;
   assume {  (Submarine__ammostore___axiom.dynamic_invariant Submarine__loadalltorpeado__a.a.Array__Int__Submarine__torpeadobay.map__content True False True True) };
   assume {  (Submarine__chambers___axiom.dynamic_invariant Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:151 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:151 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb(( (let j =  (any int
  ) in (
   (if ((Boolean.andb((0 <= j)) ((j <= 25)))) then (
     abstract ensures {true}(let _ = ((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__loadalltorpeado__a.a.Array__Int__Submarine__torpeadobay.map__content) (j)))) = 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (exists j  : int.
   ( ( (0 <= j) /\ (j <= 25) ) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__loadalltorpeado__a.a.Array__Int__Submarine__torpeadobay.map__content j)) = 0) )) )} 
  ) )) (( (let k =  (any int
  ) in (
   (if ((Boolean.andb((0 <= k)) ((k <= 4)))) then (
     abstract ensures {true}(let _ = ((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content) (k)))) = 1) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (exists k  : int.
   ( ( (0 <= k) /\ (k <= 4) ) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content k)) = 1) )) )} 
  ) ))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:151 *)
  ;
   assume {  ( (exists j  : int.
   ( ( (0 <= j) /\ (j <= 25) ) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__loadalltorpeado__a.a.Array__Int__Submarine__torpeadobay.map__content j)) = 0) )) /\ (exists k  : int.
   ( ( (0 <= k) /\ (k <= 4) ) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content k)) = 1) )) ) };
   try
   ( (#"submarine.adb" 223 0 0# ( #"submarine.adb" 223 0 0# Submarine__loadalltorpeado__i.i.int__content <- ( 0 );
   #"submarine.adb" 223 0 0# assume { #"submarine.adb" 223 0 0# (Submarine__as_index___axiom.dynamic_invariant Submarine__loadalltorpeado__i.i.int__content True False True True) } ));
   (#"submarine.adb" 224 0 0# ( #"submarine.adb" 224 0 0# Submarine__loadalltorpeado__j.j.int__content <- ( 0 );
   #"submarine.adb" 224 0 0# assume { #"submarine.adb" 224 0 0# (Submarine__chambered_index___axiom.dynamic_invariant Submarine__loadalltorpeado__j.j.int__content True False True True) } ));
   (#"submarine.adb" 226 0 0# ( #"submarine.adb" 226 0 0# Submarine__loadalltorpeado__firsttorpeadoindex.firsttorpeadoindex.int__content <- ( 0 );
   #"submarine.adb" 226 0 0# assume { #"submarine.adb" 226 0 0# (Submarine__as_index___axiom.dynamic_invariant Submarine__loadalltorpeado__firsttorpeadoindex.firsttorpeadoindex.int__content True False True True) } ));
   (#"submarine.adb" 230 0 0# ());
   (#"submarine.adb" 239 0 0# ());
   ( "GP_Sloc:submarine.adb:230:24" (#"submarine.adb" 230 0 0# ( () (* Translation of an Ada loop from submarine.adb:230 *)
   ;
   (if ((Submarine__loadalltorpeado__i.i.int__content < 25)) then (
    #"submarine.adb" 230 0 0# try
     ( #"submarine.adb" 230 0 0# abstract ensures {true}(let _ = Submarine__loadalltorpeado__firsttorpeadoindex.firsttorpeadoindex.int__content in (
      ()))
      end ;
     (let temp___299 = #"submarine.adb" 230 0 0# (any int
     ensures {#"submarine.adb" 230 0 0# (result = Submarine__loadalltorpeado__firsttorpeadoindex.firsttorpeadoindex.int__content)} 
     ) in (
      ( () (* First unroling of the loop statements appearing before the loop invariant of loop submarine.adb:230 *)
      ;
      () (* While loop translating the Ada loop from submarine.adb:230 *)
      ;
      #"submarine.adb" 230 0 0# while True do
       ( () (* Assume implicit invariants from the loop submarine.adb:230 *)
       ;
       #"submarine.adb" 230 0 0# assume { #"submarine.adb" 230 0 0# (Boolean.andb(( ( true /\ (Submarine__as_index___axiom.dynamic_invariant Submarine__loadalltorpeado__firsttorpeadoindex.firsttorpeadoindex.int__content False True True True) ) /\ true )) ((Submarine__loadalltorpeado__i.i.int__content < 25))) };
       () (* Check for absence of RTE in the invariant of loop submarine.adb:230 *)
       ;
       () (* Loop statements appearing after the loop invariant of loop submarine.adb:230 *)
       ;
       ( "GP_Sloc:submarine.adb:231:15" (#"submarine.adb" 231 0 0# ()) );
       ( "GP_Sloc:submarine.adb:231:10" (#"submarine.adb" 231 0 0# (if (((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__loadalltorpeado__a.a.Array__Int__Submarine__torpeadobay.map__content) (Submarine__loadalltorpeado__i.i.int__content)))) = 0)) then (
        ( ( "GP_Sloc:submarine.adb:232:13" (#"submarine.adb" 232 0 0# ()) );
        ( "GP_Sloc:submarine.adb:232:35" (#"submarine.adb" 232 0 0# ()) );
        ( "GP_Sloc:submarine.adb:232:32" (#"submarine.adb" 232 0 0# #"submarine.adb" 232 0 0# Submarine__loadalltorpeado__firsttorpeadoindex.firsttorpeadoindex.int__content <- ( Submarine__loadalltorpeado__i.i.int__content )) ) )) else (
        ()))) );
       () (* Check for the exit condition and loop statements appearing before the loop invariant of loop submarine.adb:230 *)
       ;
       (if (not ( (Submarine__loadalltorpeado__i.i.int__content < 25) )) then (
         raise Submarine__loadalltorpeado__L_3.L_3)) )
      done )))
      )
    with
     Submarine__loadalltorpeado__L_3.L_3 -> ()
    end)) )) );
   ( "GP_Sloc:submarine.adb:239:25" (#"submarine.adb" 239 0 0# ( () (* Translation of an Ada loop from submarine.adb:239 *)
   ;
   (if ((Submarine__loadalltorpeado__j.j.int__content < 4)) then (
    #"submarine.adb" 239 0 0# try
     ( #"submarine.adb" 239 0 0# abstract ensures {true}(let _ = Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content in (
      ()))
      end ;
     (let temp___302 = #"submarine.adb" 239 0 0# (any Array__Int__Submarine__torpeadobay.map
     ensures {#"submarine.adb" 239 0 0# (result = Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content)} 
     ) in (
      ( #"submarine.adb" 239 0 0# abstract ensures {true}(let _ = Submarine__loadalltorpeado__a.a.Array__Int__Submarine__torpeadobay.map__content in (
       ()))
       end ;
      (let temp___300 = #"submarine.adb" 239 0 0# (any Array__Int__Submarine__torpeadobay.map
      ensures {#"submarine.adb" 239 0 0# (result = Submarine__loadalltorpeado__a.a.Array__Int__Submarine__torpeadobay.map__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop submarine.adb:239 *)
       ;
       () (* While loop translating the Ada loop from submarine.adb:239 *)
       ;
       #"submarine.adb" 239 0 0# while True do
        ( () (* Assume implicit invariants from the loop submarine.adb:239 *)
        ;
        #"submarine.adb" 239 0 0# assume { #"submarine.adb" 239 0 0# (Boolean.andb(( ( ( ( true /\ (Submarine__ammostore___axiom.dynamic_invariant Submarine__loadalltorpeado__a.a.Array__Int__Submarine__torpeadobay.map__content True True True True) ) /\ (forall temp___301 #"submarine.adb" 239 0 0#  : int.
         (if (( (Submarine__as_index.first <= temp___301) /\ (temp___301 <= Submarine__as_index.last) )) then (
          (if ((Submarine__loadalltorpeado__firsttorpeadoindex.firsttorpeadoindex.int__content <> temp___301)) then (
           ((Array__Int__Submarine__torpeadobay.get Submarine__loadalltorpeado__a.a.Array__Int__Submarine__torpeadobay.map__content temp___301) = (Array__Int__Submarine__torpeadobay.get temp___300 temp___301))) else (
           true))) else true)) ) /\ (Submarine__chambers___axiom.dynamic_invariant Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content True True True True) ) /\ (forall temp___303 #"submarine.adb" 239 0 0#  : int.
         (if (( (Submarine__chambered_index.first <= temp___303) /\ (temp___303 <= Submarine__chambered_index.last) )) then (
          (if ((Submarine__loadalltorpeado__j.j.int__content <> temp___303)) then (
           ((Array__Int__Submarine__torpeadobay.get Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content temp___303) = (Array__Int__Submarine__torpeadobay.get temp___302 temp___303))) else (
           true))) else true)) )) ((Submarine__loadalltorpeado__j.j.int__content < 4))) };
        () (* Check for absence of RTE in the invariant of loop submarine.adb:239 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop submarine.adb:239 *)
        ;
        ( "GP_Sloc:submarine.adb:240:16" (#"submarine.adb" 240 0 0# ()) );
        ( "GP_Sloc:submarine.adb:240:10" (#"submarine.adb" 240 0 0# (if (((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content) (Submarine__loadalltorpeado__j.j.int__content)))) = 1)) then (
         ( ( "GP_Sloc:submarine.adb:241:15" (#"submarine.adb" 241 0 0# ()) );
         ( "GP_Sloc:submarine.adb:241:35" (#"submarine.adb" 241 0 0# #"submarine.adb" 241 0 0# Submarine__loadalltorpeado__a.a.Array__Int__Submarine__torpeadobay.map__content <- ( (Array__Int__Submarine__torpeadobay.set(Submarine__loadalltorpeado__a.a.Array__Int__Submarine__torpeadobay.map__content) (Submarine__loadalltorpeado__firsttorpeadoindex.firsttorpeadoindex.int__content) ((Submarine__torpeadobay__rep.of_rep(1)))) )) );
         ( "GP_Sloc:submarine.adb:242:15" (#"submarine.adb" 242 0 0# ()) );
         ( "GP_Sloc:submarine.adb:242:18" (#"submarine.adb" 242 0 0# #"submarine.adb" 242 0 0# Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content <- ( (Array__Int__Submarine__torpeadobay.set(Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content) (Submarine__loadalltorpeado__j.j.int__content) ((Submarine__torpeadobay__rep.of_rep(0)))) )) ) )) else (
         ()))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop submarine.adb:239 *)
        ;
        (if (not ( (Submarine__loadalltorpeado__j.j.int__content < 4) )) then (
          raise Submarine__loadalltorpeado__L_4.L_4)) )
       done )))
       )))
      )
    with
     Submarine__loadalltorpeado__L_4.L_4 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let i =  (any int
  ) in (
   (if ((Boolean.andb((0 <= i)) ((i <= 4)))) then (
     abstract ensures {true}(let _ = ((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content) (i)))) = 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (exists i  : int.
   ( ( (0 <= i) /\ (i <= 4) ) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__loadalltorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content i)) = 0) )) )} 
  ) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "firevolley" defined at submarine.ads:156, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__firevolley__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__torpeadobay
 use        Submarine__torpeadobay__rep
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__chambered_index
 use        Submarine__chambered_index___axiom
 use        Submarine__chambers___axiom
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__firevolley__c
 use        Submarine__firevolley__i
 use        Submarine__firevolley__L_5
 use        Submarine__firevolley__i___axiom
 use        Submarine__firevolley__L_5___axiom
 use        Submarine__torpeadobay___axiom
 use        Submarine__chambered_index___axiom
 use        Submarine__chambers___axiom
 use        Submarine__firevolley__c___axiom

 let def #"submarine.ads" 156 0 0#"W:diverges:N" "GP_Subp:submarine.ads:156" 
   (__void_param : unit)
  requires { #"submarine.ads" 156 0 0# true }
  ensures { #"submarine.ads" 156 0 0# (#"submarine.ads" 158 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:submarine.ads:158:14" "GP_Id:20" "comment:     Post => (for all j in C'Range => C(j) = Empty);
             ^ submarine.ads:158:14:VC_POSTCONDITION" "GP_Shape:pragargs__forall" (forall j #"submarine.ads" 158 0 0#  "model" "name:j" "model_trace:3842"  : int.
   ( ( (0 <= j) /\ (j <= 4) ) -> ( "GP_Pretty_Ada:3856" "GP_Sloc:submarine.ads:158:39" ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content j)) = 1) ) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:156 *)
  ;
   assume {  (Submarine__chambers___axiom.dynamic_invariant Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:156 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:156 *)
  ;
   abstract ensures {true}(let _ = ( (let i =  (any int
  ) in (
   (if ((Boolean.andb((0 <= i)) ((i <= 4)))) then (
     abstract ensures {true}(let _ = ((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content) (i)))) = 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (exists i  : int.
   ( ( (0 <= i) /\ (i <= 4) ) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content i)) = 0) )) )} 
  ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:156 *)
  ;
   assume {  (exists i  : int.
   ( ( (0 <= i) /\ (i <= 4) ) /\ ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content i)) = 0) )) };
   try
   ( (#"submarine.adb" 250 0 0# ( #"submarine.adb" 250 0 0# Submarine__firevolley__i.i.int__content <- ( 0 );
   #"submarine.adb" 250 0 0# assume { #"submarine.adb" 250 0 0# (Submarine__chambered_index___axiom.dynamic_invariant Submarine__firevolley__i.i.int__content True False True True) } ));
   (#"submarine.adb" 253 0 0# ());
   ( "GP_Sloc:submarine.adb:253:25" (#"submarine.adb" 253 0 0# ( () (* Translation of an Ada loop from submarine.adb:253 *)
   ;
   (if ((Submarine__firevolley__i.i.int__content < 4)) then (
    #"submarine.adb" 253 0 0# try
     ( #"submarine.adb" 253 0 0# abstract ensures {true}(let _ = Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content in (
      ()))
      end ;
     (let temp___308 = #"submarine.adb" 253 0 0# (any Array__Int__Submarine__torpeadobay.map
     ensures {#"submarine.adb" 253 0 0# (result = Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content)} 
     ) in (
      ( () (* First unroling of the loop statements appearing before the loop invariant of loop submarine.adb:253 *)
      ;
      () (* While loop translating the Ada loop from submarine.adb:253 *)
      ;
      #"submarine.adb" 253 0 0# while True do
       ( () (* Assume implicit invariants from the loop submarine.adb:253 *)
       ;
       #"submarine.adb" 253 0 0# assume { #"submarine.adb" 253 0 0# (Boolean.andb(( ( true /\ (Submarine__chambers___axiom.dynamic_invariant Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content True True True True) ) /\ (forall temp___309 #"submarine.adb" 253 0 0#  : int.
        (if (( (Submarine__chambered_index.first <= temp___309) /\ (temp___309 <= Submarine__chambered_index.last) )) then (
         (if ((Submarine__firevolley__i.i.int__content <> temp___309)) then (
          ((Array__Int__Submarine__torpeadobay.get Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content temp___309) = (Array__Int__Submarine__torpeadobay.get temp___308 temp___309))) else (
          true))) else true)) )) ((Submarine__firevolley__i.i.int__content < 4))) };
       () (* Check for absence of RTE in the invariant of loop submarine.adb:253 *)
       ;
       () (* Loop statements appearing after the loop invariant of loop submarine.adb:253 *)
       ;
       ( "GP_Sloc:submarine.adb:255:12" (#"submarine.adb" 255 0 0# ()) );
       ( "GP_Sloc:submarine.adb:255:15" (#"submarine.adb" 255 0 0# #"submarine.adb" 255 0 0# Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content <- ( (Array__Int__Submarine__torpeadobay.set(Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content) (Submarine__firevolley__i.i.int__content) ((Submarine__torpeadobay__rep.of_rep(1)))) )) );
       () (* Check for the exit condition and loop statements appearing before the loop invariant of loop submarine.adb:253 *)
       ;
       (if (not ( (Submarine__firevolley__i.i.int__content < 4) )) then (
         raise Submarine__firevolley__L_5.L_5)) )
      done )))
      )
    with
     Submarine__firevolley__L_5.L_5 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let j =  (any int
  ) in (
   (if ((Boolean.andb((0 <= j)) ((j <= 4)))) then (
     abstract ensures {true}(let _ = ((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content) (j)))) = 1) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:j" "model_trace:3842"  : int.
   ( ( (0 <= j) /\ (j <= 4) ) -> ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__firevolley__c.c.Array__Int__Submarine__torpeadobay.map__content j)) = 1) )) )} 
  ) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "firesingletorpeado" defined at submarine.ads:164, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__firesingletorpeado__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay
 use        Submarine__torpeadobay__rep
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__chambered_index___axiom
 use        Submarine__chambers___axiom
 use        Submarine__firesingletorpeado__ti
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__firesingletorpeado__c
 use        Submarine__torpeadobay___axiom
 use        Submarine__chambered_index___axiom
 use        Submarine__chambers___axiom
 use        Submarine__firesingletorpeado__ti___axiom
 use        Submarine__firesingletorpeado__c___axiom

 let def #"submarine.ads" 164 0 0#"W:diverges:N" "GP_Subp:submarine.ads:164" 
   (__void_param : unit)
  requires { #"submarine.ads" 164 0 0# true }
  ensures { #"submarine.ads" 164 0 0# (#"submarine.ads" 166 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:submarine.ads:166:14" "GP_Id:21" "comment:     Post => (C(TI) = Empty);
             ^ submarine.ads:166:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4850" "GP_Sloc:submarine.ads:166:14" ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__firesingletorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content Submarine__firesingletorpeado__ti.ti)) = 1) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:164 *)
  ;
   assume {  (Submarine__chambered_index___axiom.dynamic_invariant Submarine__firesingletorpeado__ti.ti True False True True) };
   assume {  (Submarine__chambers___axiom.dynamic_invariant Submarine__firesingletorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:164 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:164 *)
  ;
   abstract ensures {true}(let _ = ((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__firesingletorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content) (Submarine__firesingletorpeado__ti.ti)))) = 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:164 *)
  ;
   assume {  ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__firesingletorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content Submarine__firesingletorpeado__ti.ti)) = 0) };
   try
   ( ( "GP_Sloc:submarine.adb:267:13" (#"submarine.adb" 267 0 0# #"submarine.adb" 267 0 0# Submarine__firesingletorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content <- ( (Array__Int__Submarine__torpeadobay.set(Submarine__firesingletorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content) (Submarine__firesingletorpeado__ti.ti) ((Submarine__torpeadobay__rep.of_rep(1)))) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__firesingletorpeado__c.c.Array__Int__Submarine__torpeadobay.map__content) (Submarine__firesingletorpeado__ti.ti)))) = 1) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "loadchamber" defined at submarine.ads:169, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__loadchamber__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__torpeadobay
 use        Submarine__torpeadobay__rep
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__chambered_index___axiom
 use        Submarine__chambers___axiom
 use        Submarine__loadchamber__ti
 use        Array__Int__Submarine__torpeadobay
 use        Submarine__loadchamber__c
 use        Submarine__torpeadobay___axiom
 use        Submarine__chambered_index___axiom
 use        Submarine__chambers___axiom
 use        Submarine__loadchamber__ti___axiom
 use        Submarine__loadchamber__c___axiom

 let def #"submarine.ads" 169 0 0#"W:diverges:N" "GP_Subp:submarine.ads:169" 
   (__void_param : unit)
  requires { #"submarine.ads" 169 0 0# true }
  ensures { #"submarine.ads" 169 0 0# (#"submarine.ads" 171 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:submarine.ads:171:14" "GP_Id:22" "comment:     Post => (C(TI) = Loaded);
             ^ submarine.ads:171:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4889" "GP_Sloc:submarine.ads:171:14" ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__loadchamber__c.c.Array__Int__Submarine__torpeadobay.map__content Submarine__loadchamber__ti.ti)) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:169 *)
  ;
   assume {  (Submarine__chambered_index___axiom.dynamic_invariant Submarine__loadchamber__ti.ti True False True True) };
   assume {  (Submarine__chambers___axiom.dynamic_invariant Submarine__loadchamber__c.c.Array__Int__Submarine__torpeadobay.map__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:169 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:169 *)
  ;
   abstract ensures {true}(let _ = ((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__loadchamber__c.c.Array__Int__Submarine__torpeadobay.map__content) (Submarine__loadchamber__ti.ti)))) = 1) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:169 *)
  ;
   assume {  ((Submarine__torpeadobay__rep.to_rep (Array__Int__Submarine__torpeadobay.get Submarine__loadchamber__c.c.Array__Int__Submarine__torpeadobay.map__content Submarine__loadchamber__ti.ti)) = 1) };
   try
   ( ( "GP_Sloc:submarine.adb:279:19" (#"submarine.adb" 279 0 0# #"submarine.adb" 279 0 0# Submarine__loadchamber__c.c.Array__Int__Submarine__torpeadobay.map__content <- ( (Array__Int__Submarine__torpeadobay.set(Submarine__loadchamber__c.c.Array__Int__Submarine__torpeadobay.map__content) (Submarine__loadchamber__ti.ti) ((Submarine__torpeadobay__rep.of_rep(0)))) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Submarine__torpeadobay__rep.to_rep((Array__Int__Submarine__torpeadobay.get(Submarine__loadchamber__c.c.Array__Int__Submarine__torpeadobay.map__content) (Submarine__loadchamber__ti.ti)))) = 0) in (
   ()))
   end  )
end
